"use client"

import { useState } from "react"
import { View, Text, StyleSheet, TouchableOpacity, SafeAreaView } from "react-native"
import { LinearGradient } from "expo-linear-gradient"
import { Svg, Path } from "react-native-svg"
import { Image } from "react-native"
<Image source={require("../assets/Frame_16.png")} style={styles.quizImage} />

const QuizScreen = () => {
  const [selectedAnswer, setSelectedAnswer] = useState(null)
  const [isAnswered, setIsAnswered] = useState(false)

  const question = {
    text: "How many students in your class _from korea?",
    options: ["come", "comes", "are coming", "came"],
    correctAnswer: 0,
  }

  const handleAnswer = (index) => {
    setSelectedAnswer(index)
    setIsAnswered(true)
  }

  const renderOption = (option, index) => {
    const isSelected = selectedAnswer === index
    const isCorrect = index === question.correctAnswer

    let optionStyle = styles.option
    let iconComponent = null

    if (isAnswered && isSelected) {
      optionStyle = isCorrect ? styles.correctOption : styles.incorrectOption
      iconComponent = isCorrect ? (
        <Svg height="24" width="24" viewBox="0 0 24 24">
          <Path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" fill="#4CAF50" />
        </Svg>
      ) : (
        <Svg height="24" width="24" viewBox="0 0 24 24">
          <Path
            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
            fill="#FF5252"
          />
        </Svg>
      )
    }

    return (
      <TouchableOpacity
        key={index}
        style={[styles.optionButton, optionStyle]}
        onPress={() => handleAnswer(index)}
        disabled={isAnswered}
      >
        <Text style={styles.optionText}>{option}</Text>
        {iconComponent}
      </TouchableOpacity>
    )
  }

  return (
    <SafeAreaView style={styles.container}>
      <LinearGradient colors={["#7B5CFF", "#9B7DFF"]} style={styles.background}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity>
            <Svg height="24" width="24" viewBox="0 0 24 24">
              <Path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" fill="#FFFFFF" />
            </Svg>
          </TouchableOpacity>
          <View style={styles.timerContainer}>
            <Text style={styles.timerText}>18</Text>
          </View>
          <TouchableOpacity>
            <Svg height="24" width="24" viewBox="0 0 24 24">
              <Path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z" fill="#FFFFFF" />
            </Svg>
          </TouchableOpacity>
        </View>

        {/* Score Indicators */}
        <View style={styles.scoreContainer}>
          <View style={styles.scoreIndicator}>
            <Text style={[styles.scoreText, { color: "#FF9800" }]}>05</Text> {/* change color score */}   
            <View style={[styles.scoreBar, { backgroundColor: "#FF9800" }]} /> {/* change color score bar */}
          </View>
          <View style={styles.scoreIndicator}>
            <Text style={[styles.scoreText, { color: "#FF9800" }]}>07</Text>
            <View style={[styles.scoreBar, { backgroundColor: "#FF9800" }]} />
          </View>
        </View>

        {/* Question Card */}
        <View style={styles.card}>
          <Text style={styles.questionCounter}>Question 13/20</Text>
          <Text style={styles.questionText}>{question.text}</Text>
          <View style={styles.optionsContainer}>{question.options.map(renderOption)}</View>
        </View>
        

         
        {/* Next Button */}
        <TouchableOpacity style={styles.nextButton}>
          <Text style={styles.nextButtonText}>Next</Text>
        </TouchableOpacity>
      </LinearGradient>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  background: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 20,
  },
  quizImage: {
  width: 200,  // Adjust size
  height: 150,
  resizeMode: "contain",
  alignSelf: "center",
  marginBottom: 10,
},

  timerContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: "rgba(255, 255, 255, 0.3)",
    justifyContent: "center",
    alignItems: "center",
  },
  timerText: {
    color: "#FFFFFF",
    fontSize: 24,
    fontWeight: "bold",
  },
  back_frame: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: "rgba(255, 255, 255, 0.3)",
    justifyContent: "center",
    alignItems: "center",
  },
  scoreContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 20,
  },
  scoreIndicator: {
    alignItems: "center",
  },
  scoreText: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 5,
  },
  scoreBar: {
    width: 50,
    height: 4,
    borderRadius: 2,
  },
  card: {
    backgroundColor: "#FFFFFF",
    borderRadius: 20,
    padding: 20,
    marginBottom: 20,
  },
 pinkCard: {
  position: "absolute",
  width: "90%",
  height: 130, // Slightly bigger than the white card
  backgroundColor: "#FF69B4", // Pink
  borderRadius: 20,
  top: 10, // Adjust to show as background
},
  questionCounter: {
    color: "#7B5CFF",
    fontSize: 16,
    marginBottom: 10,
    textAlign: "center",
  },
  questionText: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  optionsContainer: {
    marginBottom: 20,
  },
  optionButton: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#7B5CFF",
    borderRadius: 25,
    paddingVertical: 12,
    paddingHorizontal: 20,
    marginBottom: 10,
  },
  correctOption: {
    backgroundColor: "rgba(76, 175, 80, 0.1)",
    borderColor: "#4CAF50",
  },
  incorrectOption: {
    backgroundColor: "rgba(255, 82, 82, 0.1)",
    borderColor: "#FF5252",
  },
  optionText: {
    fontSize: 16,
    color: "#333333",
  },
  nextButton: {
    backgroundColor: "#7B5CFF",
    borderRadius: 25,
    paddingVertical: 15,
    alignItems: "center",
  },
  nextButtonText: {
    color: "#FFFFFF",
    fontSize: 18,
    fontWeight: "bold",
  },
})

export default QuizScreen

