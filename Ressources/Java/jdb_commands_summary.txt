JDB Commands Summary

1. Running and Controlling Execution
- run – Start execution of the program.
- cont – Continue execution after a breakpoint.
- step – Execute the next line, stepping into methods.
- next – Execute the next line, without stepping into methods.
- finish – Continue execution until the current method returns.
- exit – Quit jdb.

2. Breakpoints and Watchpoints
- stop at ClassName:LineNumber – Set a breakpoint at a specific line.
- stop in ClassName.methodName – Set a breakpoint at a method entry.
- clear ClassName:LineNumber – Remove a breakpoint.
- watch variableName – Stop execution when a variable changes.
- unwatch variableName – Remove a watchpoint.

3. Inspecting and Modifying State
- print variableName – Print the value of a variable.
- locals – Show local variables in the current stack frame.
- dump variableName – Show detailed information about an object.
- set variableName = value – Modify the value of a variable.

4. Stack and Thread Management
- where – Show the current call stack.
- where all – Show the call stacks of all threads.
- threads – List all running threads.
- thread threadID – Switch to a specific thread.

5. Class and Method Management
- classes – List all loaded classes.
- methods ClassName – List all methods of a class.
- fields ClassName – List all fields of a class.
- classpath – Display the current classpath.

6. Additional Debugging Commands
- list – Show the source code around the current execution line.
- catch ExceptionName – Break execution when an exception occurs.
- ignore ExceptionName – Continue execution even when an exception occurs.
- help – Display available commands.

This summary provides an overview of key jdb commands for debugging Java programs effectively.
