
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model answers
 * 
 */
export type answers = $Result.DefaultSelection<Prisma.$answersPayload>
/**
 * Model attempts
 * 
 */
export type attempts = $Result.DefaultSelection<Prisma.$attemptsPayload>
/**
 * Model questions
 * 
 */
export type questions = $Result.DefaultSelection<Prisma.$questionsPayload>
/**
 * Model quizzes
 * 
 */
export type quizzes = $Result.DefaultSelection<Prisma.$quizzesPayload>
/**
 * Model student_answers
 * 
 */
export type student_answers = $Result.DefaultSelection<Prisma.$student_answersPayload>
/**
 * Model students
 * 
 */
export type students = $Result.DefaultSelection<Prisma.$studentsPayload>
/**
 * Model teachers
 * 
 */
export type teachers = $Result.DefaultSelection<Prisma.$teachersPayload>
/**
 * Model admins
 * 
 */
export type admins = $Result.DefaultSelection<Prisma.$adminsPayload>
/**
 * Model published_quizzes
 * 
 */
export type published_quizzes = $Result.DefaultSelection<Prisma.$published_quizzesPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Answers
 * const answers = await prisma.answers.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Answers
   * const answers = await prisma.answers.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.answers`: Exposes CRUD operations for the **answers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answers.findMany()
    * ```
    */
  get answers(): Prisma.answersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attempts`: Exposes CRUD operations for the **attempts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attempts
    * const attempts = await prisma.attempts.findMany()
    * ```
    */
  get attempts(): Prisma.attemptsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quizzes`: Exposes CRUD operations for the **quizzes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quizzes.findMany()
    * ```
    */
  get quizzes(): Prisma.quizzesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student_answers`: Exposes CRUD operations for the **student_answers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student_answers
    * const student_answers = await prisma.student_answers.findMany()
    * ```
    */
  get student_answers(): Prisma.student_answersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.students`: Exposes CRUD operations for the **students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.students.findMany()
    * ```
    */
  get students(): Prisma.studentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teachers`: Exposes CRUD operations for the **teachers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teachers.findMany()
    * ```
    */
  get teachers(): Prisma.teachersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admins`: Exposes CRUD operations for the **admins** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admins.findMany()
    * ```
    */
  get admins(): Prisma.adminsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.published_quizzes`: Exposes CRUD operations for the **published_quizzes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Published_quizzes
    * const published_quizzes = await prisma.published_quizzes.findMany()
    * ```
    */
  get published_quizzes(): Prisma.published_quizzesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    answers: 'answers',
    attempts: 'attempts',
    questions: 'questions',
    quizzes: 'quizzes',
    student_answers: 'student_answers',
    students: 'students',
    teachers: 'teachers',
    admins: 'admins',
    published_quizzes: 'published_quizzes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "answers" | "attempts" | "questions" | "quizzes" | "student_answers" | "students" | "teachers" | "admins" | "published_quizzes"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      answers: {
        payload: Prisma.$answersPayload<ExtArgs>
        fields: Prisma.answersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.answersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.answersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          findFirst: {
            args: Prisma.answersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.answersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          findMany: {
            args: Prisma.answersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>[]
          }
          create: {
            args: Prisma.answersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          createMany: {
            args: Prisma.answersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.answersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          update: {
            args: Prisma.answersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          deleteMany: {
            args: Prisma.answersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.answersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.answersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answersPayload>
          }
          aggregate: {
            args: Prisma.AnswersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswers>
          }
          groupBy: {
            args: Prisma.answersGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswersGroupByOutputType>[]
          }
          count: {
            args: Prisma.answersCountArgs<ExtArgs>
            result: $Utils.Optional<AnswersCountAggregateOutputType> | number
          }
        }
      }
      attempts: {
        payload: Prisma.$attemptsPayload<ExtArgs>
        fields: Prisma.attemptsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.attemptsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.attemptsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>
          }
          findFirst: {
            args: Prisma.attemptsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.attemptsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>
          }
          findMany: {
            args: Prisma.attemptsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>[]
          }
          create: {
            args: Prisma.attemptsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>
          }
          createMany: {
            args: Prisma.attemptsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.attemptsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>
          }
          update: {
            args: Prisma.attemptsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>
          }
          deleteMany: {
            args: Prisma.attemptsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.attemptsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.attemptsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attemptsPayload>
          }
          aggregate: {
            args: Prisma.AttemptsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttempts>
          }
          groupBy: {
            args: Prisma.attemptsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttemptsGroupByOutputType>[]
          }
          count: {
            args: Prisma.attemptsCountArgs<ExtArgs>
            result: $Utils.Optional<AttemptsCountAggregateOutputType> | number
          }
        }
      }
      questions: {
        payload: Prisma.$questionsPayload<ExtArgs>
        fields: Prisma.questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findFirst: {
            args: Prisma.questionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findMany: {
            args: Prisma.questionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          create: {
            args: Prisma.questionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          createMany: {
            args: Prisma.questionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.questionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          update: {
            args: Prisma.questionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          deleteMany: {
            args: Prisma.questionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.questionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.questionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.questionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionsCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      quizzes: {
        payload: Prisma.$quizzesPayload<ExtArgs>
        fields: Prisma.quizzesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.quizzesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.quizzesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          findFirst: {
            args: Prisma.quizzesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.quizzesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          findMany: {
            args: Prisma.quizzesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>[]
          }
          create: {
            args: Prisma.quizzesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          createMany: {
            args: Prisma.quizzesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.quizzesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          update: {
            args: Prisma.quizzesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          deleteMany: {
            args: Prisma.quizzesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.quizzesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.quizzesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          aggregate: {
            args: Prisma.QuizzesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuizzes>
          }
          groupBy: {
            args: Prisma.quizzesGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizzesGroupByOutputType>[]
          }
          count: {
            args: Prisma.quizzesCountArgs<ExtArgs>
            result: $Utils.Optional<QuizzesCountAggregateOutputType> | number
          }
        }
      }
      student_answers: {
        payload: Prisma.$student_answersPayload<ExtArgs>
        fields: Prisma.student_answersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.student_answersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.student_answersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>
          }
          findFirst: {
            args: Prisma.student_answersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.student_answersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>
          }
          findMany: {
            args: Prisma.student_answersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>[]
          }
          create: {
            args: Prisma.student_answersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>
          }
          createMany: {
            args: Prisma.student_answersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.student_answersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>
          }
          update: {
            args: Prisma.student_answersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>
          }
          deleteMany: {
            args: Prisma.student_answersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.student_answersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.student_answersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_answersPayload>
          }
          aggregate: {
            args: Prisma.Student_answersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent_answers>
          }
          groupBy: {
            args: Prisma.student_answersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Student_answersGroupByOutputType>[]
          }
          count: {
            args: Prisma.student_answersCountArgs<ExtArgs>
            result: $Utils.Optional<Student_answersCountAggregateOutputType> | number
          }
        }
      }
      students: {
        payload: Prisma.$studentsPayload<ExtArgs>
        fields: Prisma.studentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          findFirst: {
            args: Prisma.studentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          findMany: {
            args: Prisma.studentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>[]
          }
          create: {
            args: Prisma.studentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          createMany: {
            args: Prisma.studentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.studentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          update: {
            args: Prisma.studentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          deleteMany: {
            args: Prisma.studentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.studentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.studentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          aggregate: {
            args: Prisma.StudentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudents>
          }
          groupBy: {
            args: Prisma.studentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.studentsCountArgs<ExtArgs>
            result: $Utils.Optional<StudentsCountAggregateOutputType> | number
          }
        }
      }
      teachers: {
        payload: Prisma.$teachersPayload<ExtArgs>
        fields: Prisma.teachersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teachersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teachersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>
          }
          findFirst: {
            args: Prisma.teachersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teachersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>
          }
          findMany: {
            args: Prisma.teachersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>[]
          }
          create: {
            args: Prisma.teachersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>
          }
          createMany: {
            args: Prisma.teachersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.teachersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>
          }
          update: {
            args: Prisma.teachersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>
          }
          deleteMany: {
            args: Prisma.teachersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teachersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.teachersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teachersPayload>
          }
          aggregate: {
            args: Prisma.TeachersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeachers>
          }
          groupBy: {
            args: Prisma.teachersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeachersGroupByOutputType>[]
          }
          count: {
            args: Prisma.teachersCountArgs<ExtArgs>
            result: $Utils.Optional<TeachersCountAggregateOutputType> | number
          }
        }
      }
      admins: {
        payload: Prisma.$adminsPayload<ExtArgs>
        fields: Prisma.adminsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adminsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adminsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>
          }
          findFirst: {
            args: Prisma.adminsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adminsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>
          }
          findMany: {
            args: Prisma.adminsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>[]
          }
          create: {
            args: Prisma.adminsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>
          }
          createMany: {
            args: Prisma.adminsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.adminsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>
          }
          update: {
            args: Prisma.adminsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>
          }
          deleteMany: {
            args: Prisma.adminsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adminsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.adminsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminsPayload>
          }
          aggregate: {
            args: Prisma.AdminsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmins>
          }
          groupBy: {
            args: Prisma.adminsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminsGroupByOutputType>[]
          }
          count: {
            args: Prisma.adminsCountArgs<ExtArgs>
            result: $Utils.Optional<AdminsCountAggregateOutputType> | number
          }
        }
      }
      published_quizzes: {
        payload: Prisma.$published_quizzesPayload<ExtArgs>
        fields: Prisma.published_quizzesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.published_quizzesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.published_quizzesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>
          }
          findFirst: {
            args: Prisma.published_quizzesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.published_quizzesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>
          }
          findMany: {
            args: Prisma.published_quizzesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>[]
          }
          create: {
            args: Prisma.published_quizzesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>
          }
          createMany: {
            args: Prisma.published_quizzesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.published_quizzesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>
          }
          update: {
            args: Prisma.published_quizzesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>
          }
          deleteMany: {
            args: Prisma.published_quizzesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.published_quizzesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.published_quizzesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$published_quizzesPayload>
          }
          aggregate: {
            args: Prisma.Published_quizzesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublished_quizzes>
          }
          groupBy: {
            args: Prisma.published_quizzesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Published_quizzesGroupByOutputType>[]
          }
          count: {
            args: Prisma.published_quizzesCountArgs<ExtArgs>
            result: $Utils.Optional<Published_quizzesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    answers?: answersOmit
    attempts?: attemptsOmit
    questions?: questionsOmit
    quizzes?: quizzesOmit
    student_answers?: student_answersOmit
    students?: studentsOmit
    teachers?: teachersOmit
    admins?: adminsOmit
    published_quizzes?: published_quizzesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AttemptsCountOutputType
   */

  export type AttemptsCountOutputType = {
    student_answers: number
  }

  export type AttemptsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student_answers?: boolean | AttemptsCountOutputTypeCountStudent_answersArgs
  }

  // Custom InputTypes
  /**
   * AttemptsCountOutputType without action
   */
  export type AttemptsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptsCountOutputType
     */
    select?: AttemptsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttemptsCountOutputType without action
   */
  export type AttemptsCountOutputTypeCountStudent_answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_answersWhereInput
  }


  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    answers: number
    student_answers: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionsCountOutputTypeCountAnswersArgs
    student_answers?: boolean | QuestionsCountOutputTypeCountStudent_answersArgs
  }

  // Custom InputTypes
  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: answersWhereInput
  }

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountStudent_answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_answersWhereInput
  }


  /**
   * Count Type QuizzesCountOutputType
   */

  export type QuizzesCountOutputType = {
    attempts: number
    published_quizzes: number
    questions: number
  }

  export type QuizzesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | QuizzesCountOutputTypeCountAttemptsArgs
    published_quizzes?: boolean | QuizzesCountOutputTypeCountPublished_quizzesArgs
    questions?: boolean | QuizzesCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesCountOutputType
     */
    select?: QuizzesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attemptsWhereInput
  }

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountPublished_quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: published_quizzesWhereInput
  }

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
  }


  /**
   * Count Type StudentsCountOutputType
   */

  export type StudentsCountOutputType = {
    attempts: number
  }

  export type StudentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | StudentsCountOutputTypeCountAttemptsArgs
  }

  // Custom InputTypes
  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsCountOutputType
     */
    select?: StudentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attemptsWhereInput
  }


  /**
   * Count Type TeachersCountOutputType
   */

  export type TeachersCountOutputType = {
    quizzes: number
  }

  export type TeachersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | TeachersCountOutputTypeCountQuizzesArgs
  }

  // Custom InputTypes
  /**
   * TeachersCountOutputType without action
   */
  export type TeachersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersCountOutputType
     */
    select?: TeachersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeachersCountOutputType without action
   */
  export type TeachersCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model answers
   */

  export type AggregateAnswers = {
    _count: AnswersCountAggregateOutputType | null
    _avg: AnswersAvgAggregateOutputType | null
    _sum: AnswersSumAggregateOutputType | null
    _min: AnswersMinAggregateOutputType | null
    _max: AnswersMaxAggregateOutputType | null
  }

  export type AnswersAvgAggregateOutputType = {
    id_answer: number | null
    id_question: number | null
    correct: number | null
  }

  export type AnswersSumAggregateOutputType = {
    id_answer: number | null
    id_question: number | null
    correct: number | null
  }

  export type AnswersMinAggregateOutputType = {
    id_answer: number | null
    id_question: number | null
    answer_text: string | null
    correct: number | null
  }

  export type AnswersMaxAggregateOutputType = {
    id_answer: number | null
    id_question: number | null
    answer_text: string | null
    correct: number | null
  }

  export type AnswersCountAggregateOutputType = {
    id_answer: number
    id_question: number
    answer_text: number
    correct: number
    _all: number
  }


  export type AnswersAvgAggregateInputType = {
    id_answer?: true
    id_question?: true
    correct?: true
  }

  export type AnswersSumAggregateInputType = {
    id_answer?: true
    id_question?: true
    correct?: true
  }

  export type AnswersMinAggregateInputType = {
    id_answer?: true
    id_question?: true
    answer_text?: true
    correct?: true
  }

  export type AnswersMaxAggregateInputType = {
    id_answer?: true
    id_question?: true
    answer_text?: true
    correct?: true
  }

  export type AnswersCountAggregateInputType = {
    id_answer?: true
    id_question?: true
    answer_text?: true
    correct?: true
    _all?: true
  }

  export type AnswersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which answers to aggregate.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned answers
    **/
    _count?: true | AnswersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswersMaxAggregateInputType
  }

  export type GetAnswersAggregateType<T extends AnswersAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswers[P]>
      : GetScalarType<T[P], AggregateAnswers[P]>
  }




  export type answersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: answersWhereInput
    orderBy?: answersOrderByWithAggregationInput | answersOrderByWithAggregationInput[]
    by: AnswersScalarFieldEnum[] | AnswersScalarFieldEnum
    having?: answersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswersCountAggregateInputType | true
    _avg?: AnswersAvgAggregateInputType
    _sum?: AnswersSumAggregateInputType
    _min?: AnswersMinAggregateInputType
    _max?: AnswersMaxAggregateInputType
  }

  export type AnswersGroupByOutputType = {
    id_answer: number
    id_question: number
    answer_text: string
    correct: number
    _count: AnswersCountAggregateOutputType | null
    _avg: AnswersAvgAggregateOutputType | null
    _sum: AnswersSumAggregateOutputType | null
    _min: AnswersMinAggregateOutputType | null
    _max: AnswersMaxAggregateOutputType | null
  }

  type GetAnswersGroupByPayload<T extends answersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswersGroupByOutputType[P]>
            : GetScalarType<T[P], AnswersGroupByOutputType[P]>
        }
      >
    >


  export type answersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_answer?: boolean
    id_question?: boolean
    answer_text?: boolean
    correct?: boolean
    questions?: boolean | questionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answers"]>



  export type answersSelectScalar = {
    id_answer?: boolean
    id_question?: boolean
    answer_text?: boolean
    correct?: boolean
  }

  export type answersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_answer" | "id_question" | "answer_text" | "correct", ExtArgs["result"]["answers"]>
  export type answersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | questionsDefaultArgs<ExtArgs>
  }

  export type $answersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "answers"
    objects: {
      questions: Prisma.$questionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_answer: number
      id_question: number
      answer_text: string
      correct: number
    }, ExtArgs["result"]["answers"]>
    composites: {}
  }

  type answersGetPayload<S extends boolean | null | undefined | answersDefaultArgs> = $Result.GetResult<Prisma.$answersPayload, S>

  type answersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<answersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnswersCountAggregateInputType | true
    }

  export interface answersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['answers'], meta: { name: 'answers' } }
    /**
     * Find zero or one Answers that matches the filter.
     * @param {answersFindUniqueArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends answersFindUniqueArgs>(args: SelectSubset<T, answersFindUniqueArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Answers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {answersFindUniqueOrThrowArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends answersFindUniqueOrThrowArgs>(args: SelectSubset<T, answersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersFindFirstArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends answersFindFirstArgs>(args?: SelectSubset<T, answersFindFirstArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Answers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersFindFirstOrThrowArgs} args - Arguments to find a Answers
     * @example
     * // Get one Answers
     * const answers = await prisma.answers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends answersFindFirstOrThrowArgs>(args?: SelectSubset<T, answersFindFirstOrThrowArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answers.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answers.findMany({ take: 10 })
     * 
     * // Only select the `id_answer`
     * const answersWithId_answerOnly = await prisma.answers.findMany({ select: { id_answer: true } })
     * 
     */
    findMany<T extends answersFindManyArgs>(args?: SelectSubset<T, answersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Answers.
     * @param {answersCreateArgs} args - Arguments to create a Answers.
     * @example
     * // Create one Answers
     * const Answers = await prisma.answers.create({
     *   data: {
     *     // ... data to create a Answers
     *   }
     * })
     * 
     */
    create<T extends answersCreateArgs>(args: SelectSubset<T, answersCreateArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Answers.
     * @param {answersCreateManyArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answers = await prisma.answers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends answersCreateManyArgs>(args?: SelectSubset<T, answersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Answers.
     * @param {answersDeleteArgs} args - Arguments to delete one Answers.
     * @example
     * // Delete one Answers
     * const Answers = await prisma.answers.delete({
     *   where: {
     *     // ... filter to delete one Answers
     *   }
     * })
     * 
     */
    delete<T extends answersDeleteArgs>(args: SelectSubset<T, answersDeleteArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Answers.
     * @param {answersUpdateArgs} args - Arguments to update one Answers.
     * @example
     * // Update one Answers
     * const answers = await prisma.answers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends answersUpdateArgs>(args: SelectSubset<T, answersUpdateArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Answers.
     * @param {answersDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends answersDeleteManyArgs>(args?: SelectSubset<T, answersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answers = await prisma.answers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends answersUpdateManyArgs>(args: SelectSubset<T, answersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Answers.
     * @param {answersUpsertArgs} args - Arguments to update or create a Answers.
     * @example
     * // Update or create a Answers
     * const answers = await prisma.answers.upsert({
     *   create: {
     *     // ... data to create a Answers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answers we want to update
     *   }
     * })
     */
    upsert<T extends answersUpsertArgs>(args: SelectSubset<T, answersUpsertArgs<ExtArgs>>): Prisma__answersClient<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answers.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends answersCountArgs>(
      args?: Subset<T, answersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswersAggregateArgs>(args: Subset<T, AnswersAggregateArgs>): Prisma.PrismaPromise<GetAnswersAggregateType<T>>

    /**
     * Group by Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends answersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: answersGroupByArgs['orderBy'] }
        : { orderBy?: answersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, answersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the answers model
   */
  readonly fields: answersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for answers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__answersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends questionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, questionsDefaultArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the answers model
   */ 
  interface answersFieldRefs {
    readonly id_answer: FieldRef<"answers", 'Int'>
    readonly id_question: FieldRef<"answers", 'Int'>
    readonly answer_text: FieldRef<"answers", 'String'>
    readonly correct: FieldRef<"answers", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * answers findUnique
   */
  export type answersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers findUniqueOrThrow
   */
  export type answersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers findFirst
   */
  export type answersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     */
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * answers findFirstOrThrow
   */
  export type answersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     */
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * answers findMany
   */
  export type answersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing answers.
     */
    cursor?: answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * answers create
   */
  export type answersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * The data needed to create a answers.
     */
    data: XOR<answersCreateInput, answersUncheckedCreateInput>
  }

  /**
   * answers createMany
   */
  export type answersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many answers.
     */
    data: answersCreateManyInput | answersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * answers update
   */
  export type answersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * The data needed to update a answers.
     */
    data: XOR<answersUpdateInput, answersUncheckedUpdateInput>
    /**
     * Choose, which answers to update.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers updateMany
   */
  export type answersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update answers.
     */
    data: XOR<answersUpdateManyMutationInput, answersUncheckedUpdateManyInput>
    /**
     * Filter which answers to update
     */
    where?: answersWhereInput
    /**
     * Limit how many answers to update.
     */
    limit?: number
  }

  /**
   * answers upsert
   */
  export type answersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * The filter to search for the answers to update in case it exists.
     */
    where: answersWhereUniqueInput
    /**
     * In case the answers found by the `where` argument doesn't exist, create a new answers with this data.
     */
    create: XOR<answersCreateInput, answersUncheckedCreateInput>
    /**
     * In case the answers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<answersUpdateInput, answersUncheckedUpdateInput>
  }

  /**
   * answers delete
   */
  export type answersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    /**
     * Filter which answers to delete.
     */
    where: answersWhereUniqueInput
  }

  /**
   * answers deleteMany
   */
  export type answersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which answers to delete
     */
    where?: answersWhereInput
    /**
     * Limit how many answers to delete.
     */
    limit?: number
  }

  /**
   * answers without action
   */
  export type answersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
  }


  /**
   * Model attempts
   */

  export type AggregateAttempts = {
    _count: AttemptsCountAggregateOutputType | null
    _avg: AttemptsAvgAggregateOutputType | null
    _sum: AttemptsSumAggregateOutputType | null
    _min: AttemptsMinAggregateOutputType | null
    _max: AttemptsMaxAggregateOutputType | null
  }

  export type AttemptsAvgAggregateOutputType = {
    id_attempt: number | null
    id_student: number | null
    id_quiz: number | null
    corrected: number | null
    score: number | null
  }

  export type AttemptsSumAggregateOutputType = {
    id_attempt: number | null
    id_student: number | null
    id_quiz: number | null
    corrected: number | null
    score: number | null
  }

  export type AttemptsMinAggregateOutputType = {
    id_attempt: number | null
    id_student: number | null
    id_quiz: number | null
    corrected: number | null
    score: number | null
    attempt_at: Date | null
  }

  export type AttemptsMaxAggregateOutputType = {
    id_attempt: number | null
    id_student: number | null
    id_quiz: number | null
    corrected: number | null
    score: number | null
    attempt_at: Date | null
  }

  export type AttemptsCountAggregateOutputType = {
    id_attempt: number
    id_student: number
    id_quiz: number
    corrected: number
    score: number
    attempt_at: number
    _all: number
  }


  export type AttemptsAvgAggregateInputType = {
    id_attempt?: true
    id_student?: true
    id_quiz?: true
    corrected?: true
    score?: true
  }

  export type AttemptsSumAggregateInputType = {
    id_attempt?: true
    id_student?: true
    id_quiz?: true
    corrected?: true
    score?: true
  }

  export type AttemptsMinAggregateInputType = {
    id_attempt?: true
    id_student?: true
    id_quiz?: true
    corrected?: true
    score?: true
    attempt_at?: true
  }

  export type AttemptsMaxAggregateInputType = {
    id_attempt?: true
    id_student?: true
    id_quiz?: true
    corrected?: true
    score?: true
    attempt_at?: true
  }

  export type AttemptsCountAggregateInputType = {
    id_attempt?: true
    id_student?: true
    id_quiz?: true
    corrected?: true
    score?: true
    attempt_at?: true
    _all?: true
  }

  export type AttemptsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attempts to aggregate.
     */
    where?: attemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attempts to fetch.
     */
    orderBy?: attemptsOrderByWithRelationInput | attemptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: attemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned attempts
    **/
    _count?: true | AttemptsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttemptsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttemptsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttemptsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttemptsMaxAggregateInputType
  }

  export type GetAttemptsAggregateType<T extends AttemptsAggregateArgs> = {
        [P in keyof T & keyof AggregateAttempts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttempts[P]>
      : GetScalarType<T[P], AggregateAttempts[P]>
  }




  export type attemptsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attemptsWhereInput
    orderBy?: attemptsOrderByWithAggregationInput | attemptsOrderByWithAggregationInput[]
    by: AttemptsScalarFieldEnum[] | AttemptsScalarFieldEnum
    having?: attemptsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttemptsCountAggregateInputType | true
    _avg?: AttemptsAvgAggregateInputType
    _sum?: AttemptsSumAggregateInputType
    _min?: AttemptsMinAggregateInputType
    _max?: AttemptsMaxAggregateInputType
  }

  export type AttemptsGroupByOutputType = {
    id_attempt: number
    id_student: number
    id_quiz: number
    corrected: number
    score: number
    attempt_at: Date
    _count: AttemptsCountAggregateOutputType | null
    _avg: AttemptsAvgAggregateOutputType | null
    _sum: AttemptsSumAggregateOutputType | null
    _min: AttemptsMinAggregateOutputType | null
    _max: AttemptsMaxAggregateOutputType | null
  }

  type GetAttemptsGroupByPayload<T extends attemptsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttemptsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttemptsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttemptsGroupByOutputType[P]>
            : GetScalarType<T[P], AttemptsGroupByOutputType[P]>
        }
      >
    >


  export type attemptsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_attempt?: boolean
    id_student?: boolean
    id_quiz?: boolean
    corrected?: boolean
    score?: boolean
    attempt_at?: boolean
    students?: boolean | studentsDefaultArgs<ExtArgs>
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
    student_answers?: boolean | attempts$student_answersArgs<ExtArgs>
    _count?: boolean | AttemptsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attempts"]>



  export type attemptsSelectScalar = {
    id_attempt?: boolean
    id_student?: boolean
    id_quiz?: boolean
    corrected?: boolean
    score?: boolean
    attempt_at?: boolean
  }

  export type attemptsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_attempt" | "id_student" | "id_quiz" | "corrected" | "score" | "attempt_at", ExtArgs["result"]["attempts"]>
  export type attemptsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | studentsDefaultArgs<ExtArgs>
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
    student_answers?: boolean | attempts$student_answersArgs<ExtArgs>
    _count?: boolean | AttemptsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $attemptsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "attempts"
    objects: {
      students: Prisma.$studentsPayload<ExtArgs>
      quizzes: Prisma.$quizzesPayload<ExtArgs>
      student_answers: Prisma.$student_answersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_attempt: number
      id_student: number
      id_quiz: number
      corrected: number
      score: number
      attempt_at: Date
    }, ExtArgs["result"]["attempts"]>
    composites: {}
  }

  type attemptsGetPayload<S extends boolean | null | undefined | attemptsDefaultArgs> = $Result.GetResult<Prisma.$attemptsPayload, S>

  type attemptsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<attemptsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttemptsCountAggregateInputType | true
    }

  export interface attemptsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attempts'], meta: { name: 'attempts' } }
    /**
     * Find zero or one Attempts that matches the filter.
     * @param {attemptsFindUniqueArgs} args - Arguments to find a Attempts
     * @example
     * // Get one Attempts
     * const attempts = await prisma.attempts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends attemptsFindUniqueArgs>(args: SelectSubset<T, attemptsFindUniqueArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attempts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {attemptsFindUniqueOrThrowArgs} args - Arguments to find a Attempts
     * @example
     * // Get one Attempts
     * const attempts = await prisma.attempts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends attemptsFindUniqueOrThrowArgs>(args: SelectSubset<T, attemptsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attemptsFindFirstArgs} args - Arguments to find a Attempts
     * @example
     * // Get one Attempts
     * const attempts = await prisma.attempts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends attemptsFindFirstArgs>(args?: SelectSubset<T, attemptsFindFirstArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attempts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attemptsFindFirstOrThrowArgs} args - Arguments to find a Attempts
     * @example
     * // Get one Attempts
     * const attempts = await prisma.attempts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends attemptsFindFirstOrThrowArgs>(args?: SelectSubset<T, attemptsFindFirstOrThrowArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attemptsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attempts
     * const attempts = await prisma.attempts.findMany()
     * 
     * // Get first 10 Attempts
     * const attempts = await prisma.attempts.findMany({ take: 10 })
     * 
     * // Only select the `id_attempt`
     * const attemptsWithId_attemptOnly = await prisma.attempts.findMany({ select: { id_attempt: true } })
     * 
     */
    findMany<T extends attemptsFindManyArgs>(args?: SelectSubset<T, attemptsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attempts.
     * @param {attemptsCreateArgs} args - Arguments to create a Attempts.
     * @example
     * // Create one Attempts
     * const Attempts = await prisma.attempts.create({
     *   data: {
     *     // ... data to create a Attempts
     *   }
     * })
     * 
     */
    create<T extends attemptsCreateArgs>(args: SelectSubset<T, attemptsCreateArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attempts.
     * @param {attemptsCreateManyArgs} args - Arguments to create many Attempts.
     * @example
     * // Create many Attempts
     * const attempts = await prisma.attempts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends attemptsCreateManyArgs>(args?: SelectSubset<T, attemptsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attempts.
     * @param {attemptsDeleteArgs} args - Arguments to delete one Attempts.
     * @example
     * // Delete one Attempts
     * const Attempts = await prisma.attempts.delete({
     *   where: {
     *     // ... filter to delete one Attempts
     *   }
     * })
     * 
     */
    delete<T extends attemptsDeleteArgs>(args: SelectSubset<T, attemptsDeleteArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attempts.
     * @param {attemptsUpdateArgs} args - Arguments to update one Attempts.
     * @example
     * // Update one Attempts
     * const attempts = await prisma.attempts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends attemptsUpdateArgs>(args: SelectSubset<T, attemptsUpdateArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attempts.
     * @param {attemptsDeleteManyArgs} args - Arguments to filter Attempts to delete.
     * @example
     * // Delete a few Attempts
     * const { count } = await prisma.attempts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends attemptsDeleteManyArgs>(args?: SelectSubset<T, attemptsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attemptsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attempts
     * const attempts = await prisma.attempts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends attemptsUpdateManyArgs>(args: SelectSubset<T, attemptsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attempts.
     * @param {attemptsUpsertArgs} args - Arguments to update or create a Attempts.
     * @example
     * // Update or create a Attempts
     * const attempts = await prisma.attempts.upsert({
     *   create: {
     *     // ... data to create a Attempts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attempts we want to update
     *   }
     * })
     */
    upsert<T extends attemptsUpsertArgs>(args: SelectSubset<T, attemptsUpsertArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attemptsCountArgs} args - Arguments to filter Attempts to count.
     * @example
     * // Count the number of Attempts
     * const count = await prisma.attempts.count({
     *   where: {
     *     // ... the filter for the Attempts we want to count
     *   }
     * })
    **/
    count<T extends attemptsCountArgs>(
      args?: Subset<T, attemptsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttemptsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttemptsAggregateArgs>(args: Subset<T, AttemptsAggregateArgs>): Prisma.PrismaPromise<GetAttemptsAggregateType<T>>

    /**
     * Group by Attempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attemptsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends attemptsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: attemptsGroupByArgs['orderBy'] }
        : { orderBy?: attemptsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, attemptsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttemptsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the attempts model
   */
  readonly fields: attemptsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for attempts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__attemptsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends studentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studentsDefaultArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quizzes<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student_answers<T extends attempts$student_answersArgs<ExtArgs> = {}>(args?: Subset<T, attempts$student_answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the attempts model
   */ 
  interface attemptsFieldRefs {
    readonly id_attempt: FieldRef<"attempts", 'Int'>
    readonly id_student: FieldRef<"attempts", 'Int'>
    readonly id_quiz: FieldRef<"attempts", 'Int'>
    readonly corrected: FieldRef<"attempts", 'Int'>
    readonly score: FieldRef<"attempts", 'Float'>
    readonly attempt_at: FieldRef<"attempts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * attempts findUnique
   */
  export type attemptsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * Filter, which attempts to fetch.
     */
    where: attemptsWhereUniqueInput
  }

  /**
   * attempts findUniqueOrThrow
   */
  export type attemptsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * Filter, which attempts to fetch.
     */
    where: attemptsWhereUniqueInput
  }

  /**
   * attempts findFirst
   */
  export type attemptsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * Filter, which attempts to fetch.
     */
    where?: attemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attempts to fetch.
     */
    orderBy?: attemptsOrderByWithRelationInput | attemptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attempts.
     */
    cursor?: attemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attempts.
     */
    distinct?: AttemptsScalarFieldEnum | AttemptsScalarFieldEnum[]
  }

  /**
   * attempts findFirstOrThrow
   */
  export type attemptsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * Filter, which attempts to fetch.
     */
    where?: attemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attempts to fetch.
     */
    orderBy?: attemptsOrderByWithRelationInput | attemptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attempts.
     */
    cursor?: attemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attempts.
     */
    distinct?: AttemptsScalarFieldEnum | AttemptsScalarFieldEnum[]
  }

  /**
   * attempts findMany
   */
  export type attemptsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * Filter, which attempts to fetch.
     */
    where?: attemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attempts to fetch.
     */
    orderBy?: attemptsOrderByWithRelationInput | attemptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing attempts.
     */
    cursor?: attemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attempts.
     */
    skip?: number
    distinct?: AttemptsScalarFieldEnum | AttemptsScalarFieldEnum[]
  }

  /**
   * attempts create
   */
  export type attemptsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * The data needed to create a attempts.
     */
    data: XOR<attemptsCreateInput, attemptsUncheckedCreateInput>
  }

  /**
   * attempts createMany
   */
  export type attemptsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many attempts.
     */
    data: attemptsCreateManyInput | attemptsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * attempts update
   */
  export type attemptsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * The data needed to update a attempts.
     */
    data: XOR<attemptsUpdateInput, attemptsUncheckedUpdateInput>
    /**
     * Choose, which attempts to update.
     */
    where: attemptsWhereUniqueInput
  }

  /**
   * attempts updateMany
   */
  export type attemptsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update attempts.
     */
    data: XOR<attemptsUpdateManyMutationInput, attemptsUncheckedUpdateManyInput>
    /**
     * Filter which attempts to update
     */
    where?: attemptsWhereInput
    /**
     * Limit how many attempts to update.
     */
    limit?: number
  }

  /**
   * attempts upsert
   */
  export type attemptsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * The filter to search for the attempts to update in case it exists.
     */
    where: attemptsWhereUniqueInput
    /**
     * In case the attempts found by the `where` argument doesn't exist, create a new attempts with this data.
     */
    create: XOR<attemptsCreateInput, attemptsUncheckedCreateInput>
    /**
     * In case the attempts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<attemptsUpdateInput, attemptsUncheckedUpdateInput>
  }

  /**
   * attempts delete
   */
  export type attemptsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    /**
     * Filter which attempts to delete.
     */
    where: attemptsWhereUniqueInput
  }

  /**
   * attempts deleteMany
   */
  export type attemptsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attempts to delete
     */
    where?: attemptsWhereInput
    /**
     * Limit how many attempts to delete.
     */
    limit?: number
  }

  /**
   * attempts.student_answers
   */
  export type attempts$student_answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    where?: student_answersWhereInput
    orderBy?: student_answersOrderByWithRelationInput | student_answersOrderByWithRelationInput[]
    cursor?: student_answersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student_answersScalarFieldEnum | Student_answersScalarFieldEnum[]
  }

  /**
   * attempts without action
   */
  export type attemptsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
  }


  /**
   * Model questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id_question: number | null
    id_quiz: number | null
    duration: number | null
    question_number: number | null
    points: number | null
    question_percentage: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    id_question: number | null
    id_quiz: number | null
    duration: number | null
    question_number: number | null
    points: number | null
    question_percentage: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    id_question: number | null
    id_quiz: number | null
    duration: number | null
    question_text: string | null
    question_number: number | null
    points: number | null
    question_type: string | null
    created_at: Date | null
    question_percentage: number | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id_question: number | null
    id_quiz: number | null
    duration: number | null
    question_text: string | null
    question_number: number | null
    points: number | null
    question_type: string | null
    created_at: Date | null
    question_percentage: number | null
  }

  export type QuestionsCountAggregateOutputType = {
    id_question: number
    id_quiz: number
    duration: number
    question_text: number
    question_number: number
    points: number
    question_type: number
    created_at: number
    question_percentage: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id_question?: true
    id_quiz?: true
    duration?: true
    question_number?: true
    points?: true
    question_percentage?: true
  }

  export type QuestionsSumAggregateInputType = {
    id_question?: true
    id_quiz?: true
    duration?: true
    question_number?: true
    points?: true
    question_percentage?: true
  }

  export type QuestionsMinAggregateInputType = {
    id_question?: true
    id_quiz?: true
    duration?: true
    question_text?: true
    question_number?: true
    points?: true
    question_type?: true
    created_at?: true
    question_percentage?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id_question?: true
    id_quiz?: true
    duration?: true
    question_text?: true
    question_number?: true
    points?: true
    question_type?: true
    created_at?: true
    question_percentage?: true
  }

  export type QuestionsCountAggregateInputType = {
    id_question?: true
    id_quiz?: true
    duration?: true
    question_text?: true
    question_number?: true
    points?: true
    question_type?: true
    created_at?: true
    question_percentage?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to aggregate.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithAggregationInput | questionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    id_question: number
    id_quiz: number
    duration: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at: Date
    question_percentage: number
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_question?: boolean
    id_quiz?: boolean
    duration?: boolean
    question_text?: boolean
    question_number?: boolean
    points?: boolean
    question_type?: boolean
    created_at?: boolean
    question_percentage?: boolean
    answers?: boolean | questions$answersArgs<ExtArgs>
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
    student_answers?: boolean | questions$student_answersArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>



  export type questionsSelectScalar = {
    id_question?: boolean
    id_quiz?: boolean
    duration?: boolean
    question_text?: boolean
    question_number?: boolean
    points?: boolean
    question_type?: boolean
    created_at?: boolean
    question_percentage?: boolean
  }

  export type questionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_question" | "id_quiz" | "duration" | "question_text" | "question_number" | "points" | "question_type" | "created_at" | "question_percentage", ExtArgs["result"]["questions"]>
  export type questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | questions$answersArgs<ExtArgs>
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
    student_answers?: boolean | questions$student_answersArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "questions"
    objects: {
      answers: Prisma.$answersPayload<ExtArgs>[]
      quizzes: Prisma.$quizzesPayload<ExtArgs>
      student_answers: Prisma.$student_answersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_question: number
      id_quiz: number
      duration: number | null
      question_text: string
      question_number: number
      points: number
      question_type: string
      created_at: Date
      question_percentage: number
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }

  type questionsGetPayload<S extends boolean | null | undefined | questionsDefaultArgs> = $Result.GetResult<Prisma.$questionsPayload, S>

  type questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<questionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['questions'], meta: { name: 'questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {questionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends questionsFindUniqueArgs>(args: SelectSubset<T, questionsFindUniqueArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Questions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {questionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends questionsFindUniqueOrThrowArgs>(args: SelectSubset<T, questionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends questionsFindFirstArgs>(args?: SelectSubset<T, questionsFindFirstArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends questionsFindFirstOrThrowArgs>(args?: SelectSubset<T, questionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id_question`
     * const questionsWithId_questionOnly = await prisma.questions.findMany({ select: { id_question: true } })
     * 
     */
    findMany<T extends questionsFindManyArgs>(args?: SelectSubset<T, questionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
     */
    create<T extends questionsCreateArgs>(args: SelectSubset<T, questionsCreateArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {questionsCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const questions = await prisma.questions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends questionsCreateManyArgs>(args?: SelectSubset<T, questionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
     */
    delete<T extends questionsDeleteArgs>(args: SelectSubset<T, questionsDeleteArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends questionsUpdateArgs>(args: SelectSubset<T, questionsUpdateArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends questionsDeleteManyArgs>(args?: SelectSubset<T, questionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends questionsUpdateManyArgs>(args: SelectSubset<T, questionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
     */
    upsert<T extends questionsUpsertArgs>(args: SelectSubset<T, questionsUpsertArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionsCountArgs>(
      args?: Subset<T, questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionsGroupByArgs['orderBy'] }
        : { orderBy?: questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the questions model
   */
  readonly fields: questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    answers<T extends questions$answersArgs<ExtArgs> = {}>(args?: Subset<T, questions$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quizzes<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student_answers<T extends questions$student_answersArgs<ExtArgs> = {}>(args?: Subset<T, questions$student_answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the questions model
   */ 
  interface questionsFieldRefs {
    readonly id_question: FieldRef<"questions", 'Int'>
    readonly id_quiz: FieldRef<"questions", 'Int'>
    readonly duration: FieldRef<"questions", 'Int'>
    readonly question_text: FieldRef<"questions", 'String'>
    readonly question_number: FieldRef<"questions", 'Int'>
    readonly points: FieldRef<"questions", 'Float'>
    readonly question_type: FieldRef<"questions", 'String'>
    readonly created_at: FieldRef<"questions", 'DateTime'>
    readonly question_percentage: FieldRef<"questions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * questions findUnique
   */
  export type questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions findUniqueOrThrow
   */
  export type questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions findFirst
   */
  export type questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions findFirstOrThrow
   */
  export type questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions findMany
   */
  export type questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions create
   */
  export type questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a questions.
     */
    data: XOR<questionsCreateInput, questionsUncheckedCreateInput>
  }

  /**
   * questions createMany
   */
  export type questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionsCreateManyInput | questionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * questions update
   */
  export type questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a questions.
     */
    data: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
    /**
     * Choose, which questions to update.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionsWhereInput
    /**
     * Limit how many questions to update.
     */
    limit?: number
  }

  /**
   * questions upsert
   */
  export type questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the questions to update in case it exists.
     */
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
     */
    create: XOR<questionsCreateInput, questionsUncheckedCreateInput>
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
  }

  /**
   * questions delete
   */
  export type questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter which questions to delete.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionsWhereInput
    /**
     * Limit how many questions to delete.
     */
    limit?: number
  }

  /**
   * questions.answers
   */
  export type questions$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answers
     */
    select?: answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the answers
     */
    omit?: answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answersInclude<ExtArgs> | null
    where?: answersWhereInput
    orderBy?: answersOrderByWithRelationInput | answersOrderByWithRelationInput[]
    cursor?: answersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswersScalarFieldEnum | AnswersScalarFieldEnum[]
  }

  /**
   * questions.student_answers
   */
  export type questions$student_answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    where?: student_answersWhereInput
    orderBy?: student_answersOrderByWithRelationInput | student_answersOrderByWithRelationInput[]
    cursor?: student_answersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student_answersScalarFieldEnum | Student_answersScalarFieldEnum[]
  }

  /**
   * questions without action
   */
  export type questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
  }


  /**
   * Model quizzes
   */

  export type AggregateQuizzes = {
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  export type QuizzesAvgAggregateOutputType = {
    id_quiz: number | null
    duration: number | null
    id_teacher: number | null
    score: number | null
    for_year: number | null
    for_groupe: number | null
    nb_attempts: number | null
  }

  export type QuizzesSumAggregateOutputType = {
    id_quiz: number | null
    duration: number | null
    id_teacher: number | null
    score: number | null
    for_year: number | null
    for_groupe: number | null
    nb_attempts: number | null
  }

  export type QuizzesMinAggregateOutputType = {
    id_quiz: number | null
    title: string | null
    description: string | null
    duration: number | null
    correctionType: string | null
    id_teacher: number | null
    subject: string | null
    status: string | null
    score: number | null
    for_year: number | null
    for_groupe: number | null
    created_at: Date | null
    nb_attempts: number | null
  }

  export type QuizzesMaxAggregateOutputType = {
    id_quiz: number | null
    title: string | null
    description: string | null
    duration: number | null
    correctionType: string | null
    id_teacher: number | null
    subject: string | null
    status: string | null
    score: number | null
    for_year: number | null
    for_groupe: number | null
    created_at: Date | null
    nb_attempts: number | null
  }

  export type QuizzesCountAggregateOutputType = {
    id_quiz: number
    title: number
    description: number
    duration: number
    correctionType: number
    id_teacher: number
    subject: number
    status: number
    score: number
    for_year: number
    for_groupe: number
    created_at: number
    nb_attempts: number
    _all: number
  }


  export type QuizzesAvgAggregateInputType = {
    id_quiz?: true
    duration?: true
    id_teacher?: true
    score?: true
    for_year?: true
    for_groupe?: true
    nb_attempts?: true
  }

  export type QuizzesSumAggregateInputType = {
    id_quiz?: true
    duration?: true
    id_teacher?: true
    score?: true
    for_year?: true
    for_groupe?: true
    nb_attempts?: true
  }

  export type QuizzesMinAggregateInputType = {
    id_quiz?: true
    title?: true
    description?: true
    duration?: true
    correctionType?: true
    id_teacher?: true
    subject?: true
    status?: true
    score?: true
    for_year?: true
    for_groupe?: true
    created_at?: true
    nb_attempts?: true
  }

  export type QuizzesMaxAggregateInputType = {
    id_quiz?: true
    title?: true
    description?: true
    duration?: true
    correctionType?: true
    id_teacher?: true
    subject?: true
    status?: true
    score?: true
    for_year?: true
    for_groupe?: true
    created_at?: true
    nb_attempts?: true
  }

  export type QuizzesCountAggregateInputType = {
    id_quiz?: true
    title?: true
    description?: true
    duration?: true
    correctionType?: true
    id_teacher?: true
    subject?: true
    status?: true
    score?: true
    for_year?: true
    for_groupe?: true
    created_at?: true
    nb_attempts?: true
    _all?: true
  }

  export type QuizzesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to aggregate.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quizzes
    **/
    _count?: true | QuizzesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizzesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizzesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizzesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizzesMaxAggregateInputType
  }

  export type GetQuizzesAggregateType<T extends QuizzesAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizzes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizzes[P]>
      : GetScalarType<T[P], AggregateQuizzes[P]>
  }




  export type quizzesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithAggregationInput | quizzesOrderByWithAggregationInput[]
    by: QuizzesScalarFieldEnum[] | QuizzesScalarFieldEnum
    having?: quizzesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizzesCountAggregateInputType | true
    _avg?: QuizzesAvgAggregateInputType
    _sum?: QuizzesSumAggregateInputType
    _min?: QuizzesMinAggregateInputType
    _max?: QuizzesMaxAggregateInputType
  }

  export type QuizzesGroupByOutputType = {
    id_quiz: number
    title: string
    description: string | null
    duration: number | null
    correctionType: string
    id_teacher: number
    subject: string
    status: string
    score: number
    for_year: number | null
    for_groupe: number | null
    created_at: Date
    nb_attempts: number
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  type GetQuizzesGroupByPayload<T extends quizzesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizzesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizzesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
            : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
        }
      >
    >


  export type quizzesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_quiz?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    correctionType?: boolean
    id_teacher?: boolean
    subject?: boolean
    status?: boolean
    score?: boolean
    for_year?: boolean
    for_groupe?: boolean
    created_at?: boolean
    nb_attempts?: boolean
    attempts?: boolean | quizzes$attemptsArgs<ExtArgs>
    published_quizzes?: boolean | quizzes$published_quizzesArgs<ExtArgs>
    questions?: boolean | quizzes$questionsArgs<ExtArgs>
    teachers?: boolean | teachersDefaultArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>



  export type quizzesSelectScalar = {
    id_quiz?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    correctionType?: boolean
    id_teacher?: boolean
    subject?: boolean
    status?: boolean
    score?: boolean
    for_year?: boolean
    for_groupe?: boolean
    created_at?: boolean
    nb_attempts?: boolean
  }

  export type quizzesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_quiz" | "title" | "description" | "duration" | "correctionType" | "id_teacher" | "subject" | "status" | "score" | "for_year" | "for_groupe" | "created_at" | "nb_attempts", ExtArgs["result"]["quizzes"]>
  export type quizzesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | quizzes$attemptsArgs<ExtArgs>
    published_quizzes?: boolean | quizzes$published_quizzesArgs<ExtArgs>
    questions?: boolean | quizzes$questionsArgs<ExtArgs>
    teachers?: boolean | teachersDefaultArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $quizzesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "quizzes"
    objects: {
      attempts: Prisma.$attemptsPayload<ExtArgs>[]
      published_quizzes: Prisma.$published_quizzesPayload<ExtArgs>[]
      questions: Prisma.$questionsPayload<ExtArgs>[]
      teachers: Prisma.$teachersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_quiz: number
      title: string
      description: string | null
      duration: number | null
      correctionType: string
      id_teacher: number
      subject: string
      status: string
      score: number
      for_year: number | null
      for_groupe: number | null
      created_at: Date
      nb_attempts: number
    }, ExtArgs["result"]["quizzes"]>
    composites: {}
  }

  type quizzesGetPayload<S extends boolean | null | undefined | quizzesDefaultArgs> = $Result.GetResult<Prisma.$quizzesPayload, S>

  type quizzesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<quizzesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuizzesCountAggregateInputType | true
    }

  export interface quizzesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quizzes'], meta: { name: 'quizzes' } }
    /**
     * Find zero or one Quizzes that matches the filter.
     * @param {quizzesFindUniqueArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends quizzesFindUniqueArgs>(args: SelectSubset<T, quizzesFindUniqueArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quizzes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {quizzesFindUniqueOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends quizzesFindUniqueOrThrowArgs>(args: SelectSubset<T, quizzesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindFirstArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends quizzesFindFirstArgs>(args?: SelectSubset<T, quizzesFindFirstArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quizzes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindFirstOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends quizzesFindFirstOrThrowArgs>(args?: SelectSubset<T, quizzesFindFirstOrThrowArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quizzes.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quizzes.findMany({ take: 10 })
     * 
     * // Only select the `id_quiz`
     * const quizzesWithId_quizOnly = await prisma.quizzes.findMany({ select: { id_quiz: true } })
     * 
     */
    findMany<T extends quizzesFindManyArgs>(args?: SelectSubset<T, quizzesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quizzes.
     * @param {quizzesCreateArgs} args - Arguments to create a Quizzes.
     * @example
     * // Create one Quizzes
     * const Quizzes = await prisma.quizzes.create({
     *   data: {
     *     // ... data to create a Quizzes
     *   }
     * })
     * 
     */
    create<T extends quizzesCreateArgs>(args: SelectSubset<T, quizzesCreateArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quizzes.
     * @param {quizzesCreateManyArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quizzes = await prisma.quizzes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends quizzesCreateManyArgs>(args?: SelectSubset<T, quizzesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quizzes.
     * @param {quizzesDeleteArgs} args - Arguments to delete one Quizzes.
     * @example
     * // Delete one Quizzes
     * const Quizzes = await prisma.quizzes.delete({
     *   where: {
     *     // ... filter to delete one Quizzes
     *   }
     * })
     * 
     */
    delete<T extends quizzesDeleteArgs>(args: SelectSubset<T, quizzesDeleteArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quizzes.
     * @param {quizzesUpdateArgs} args - Arguments to update one Quizzes.
     * @example
     * // Update one Quizzes
     * const quizzes = await prisma.quizzes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends quizzesUpdateArgs>(args: SelectSubset<T, quizzesUpdateArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quizzes.
     * @param {quizzesDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quizzes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends quizzesDeleteManyArgs>(args?: SelectSubset<T, quizzesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quizzes = await prisma.quizzes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends quizzesUpdateManyArgs>(args: SelectSubset<T, quizzesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quizzes.
     * @param {quizzesUpsertArgs} args - Arguments to update or create a Quizzes.
     * @example
     * // Update or create a Quizzes
     * const quizzes = await prisma.quizzes.upsert({
     *   create: {
     *     // ... data to create a Quizzes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quizzes we want to update
     *   }
     * })
     */
    upsert<T extends quizzesUpsertArgs>(args: SelectSubset<T, quizzesUpsertArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quizzes.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends quizzesCountArgs>(
      args?: Subset<T, quizzesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizzesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizzesAggregateArgs>(args: Subset<T, QuizzesAggregateArgs>): Prisma.PrismaPromise<GetQuizzesAggregateType<T>>

    /**
     * Group by Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends quizzesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: quizzesGroupByArgs['orderBy'] }
        : { orderBy?: quizzesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, quizzesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizzesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the quizzes model
   */
  readonly fields: quizzesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for quizzes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__quizzesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attempts<T extends quizzes$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    published_quizzes<T extends quizzes$published_quizzesArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$published_quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends quizzes$questionsArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teachers<T extends teachersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teachersDefaultArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the quizzes model
   */ 
  interface quizzesFieldRefs {
    readonly id_quiz: FieldRef<"quizzes", 'Int'>
    readonly title: FieldRef<"quizzes", 'String'>
    readonly description: FieldRef<"quizzes", 'String'>
    readonly duration: FieldRef<"quizzes", 'Int'>
    readonly correctionType: FieldRef<"quizzes", 'String'>
    readonly id_teacher: FieldRef<"quizzes", 'Int'>
    readonly subject: FieldRef<"quizzes", 'String'>
    readonly status: FieldRef<"quizzes", 'String'>
    readonly score: FieldRef<"quizzes", 'Float'>
    readonly for_year: FieldRef<"quizzes", 'Int'>
    readonly for_groupe: FieldRef<"quizzes", 'Int'>
    readonly created_at: FieldRef<"quizzes", 'DateTime'>
    readonly nb_attempts: FieldRef<"quizzes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * quizzes findUnique
   */
  export type quizzesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes findUniqueOrThrow
   */
  export type quizzesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes findFirst
   */
  export type quizzesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * quizzes findFirstOrThrow
   */
  export type quizzesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * quizzes findMany
   */
  export type quizzesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * quizzes create
   */
  export type quizzesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The data needed to create a quizzes.
     */
    data: XOR<quizzesCreateInput, quizzesUncheckedCreateInput>
  }

  /**
   * quizzes createMany
   */
  export type quizzesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quizzes.
     */
    data: quizzesCreateManyInput | quizzesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * quizzes update
   */
  export type quizzesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The data needed to update a quizzes.
     */
    data: XOR<quizzesUpdateInput, quizzesUncheckedUpdateInput>
    /**
     * Choose, which quizzes to update.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes updateMany
   */
  export type quizzesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quizzes.
     */
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyInput>
    /**
     * Filter which quizzes to update
     */
    where?: quizzesWhereInput
    /**
     * Limit how many quizzes to update.
     */
    limit?: number
  }

  /**
   * quizzes upsert
   */
  export type quizzesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The filter to search for the quizzes to update in case it exists.
     */
    where: quizzesWhereUniqueInput
    /**
     * In case the quizzes found by the `where` argument doesn't exist, create a new quizzes with this data.
     */
    create: XOR<quizzesCreateInput, quizzesUncheckedCreateInput>
    /**
     * In case the quizzes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quizzesUpdateInput, quizzesUncheckedUpdateInput>
  }

  /**
   * quizzes delete
   */
  export type quizzesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter which quizzes to delete.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes deleteMany
   */
  export type quizzesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to delete
     */
    where?: quizzesWhereInput
    /**
     * Limit how many quizzes to delete.
     */
    limit?: number
  }

  /**
   * quizzes.attempts
   */
  export type quizzes$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    where?: attemptsWhereInput
    orderBy?: attemptsOrderByWithRelationInput | attemptsOrderByWithRelationInput[]
    cursor?: attemptsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttemptsScalarFieldEnum | AttemptsScalarFieldEnum[]
  }

  /**
   * quizzes.published_quizzes
   */
  export type quizzes$published_quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    where?: published_quizzesWhereInput
    orderBy?: published_quizzesOrderByWithRelationInput | published_quizzesOrderByWithRelationInput[]
    cursor?: published_quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Published_quizzesScalarFieldEnum | Published_quizzesScalarFieldEnum[]
  }

  /**
   * quizzes.questions
   */
  export type quizzes$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    cursor?: questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * quizzes without action
   */
  export type quizzesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
  }


  /**
   * Model student_answers
   */

  export type AggregateStudent_answers = {
    _count: Student_answersCountAggregateOutputType | null
    _avg: Student_answersAvgAggregateOutputType | null
    _sum: Student_answersSumAggregateOutputType | null
    _min: Student_answersMinAggregateOutputType | null
    _max: Student_answersMaxAggregateOutputType | null
  }

  export type Student_answersAvgAggregateOutputType = {
    id_student_answer: number | null
    id_attempt: number | null
    id_question: number | null
    correct: number | null
  }

  export type Student_answersSumAggregateOutputType = {
    id_student_answer: number | null
    id_attempt: number | null
    id_question: number | null
    correct: number | null
  }

  export type Student_answersMinAggregateOutputType = {
    id_student_answer: number | null
    id_attempt: number | null
    id_question: number | null
    student_answer_text: string | null
    correct: number | null
  }

  export type Student_answersMaxAggregateOutputType = {
    id_student_answer: number | null
    id_attempt: number | null
    id_question: number | null
    student_answer_text: string | null
    correct: number | null
  }

  export type Student_answersCountAggregateOutputType = {
    id_student_answer: number
    id_attempt: number
    id_question: number
    student_answer_text: number
    correct: number
    _all: number
  }


  export type Student_answersAvgAggregateInputType = {
    id_student_answer?: true
    id_attempt?: true
    id_question?: true
    correct?: true
  }

  export type Student_answersSumAggregateInputType = {
    id_student_answer?: true
    id_attempt?: true
    id_question?: true
    correct?: true
  }

  export type Student_answersMinAggregateInputType = {
    id_student_answer?: true
    id_attempt?: true
    id_question?: true
    student_answer_text?: true
    correct?: true
  }

  export type Student_answersMaxAggregateInputType = {
    id_student_answer?: true
    id_attempt?: true
    id_question?: true
    student_answer_text?: true
    correct?: true
  }

  export type Student_answersCountAggregateInputType = {
    id_student_answer?: true
    id_attempt?: true
    id_question?: true
    student_answer_text?: true
    correct?: true
    _all?: true
  }

  export type Student_answersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student_answers to aggregate.
     */
    where?: student_answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_answers to fetch.
     */
    orderBy?: student_answersOrderByWithRelationInput | student_answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: student_answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned student_answers
    **/
    _count?: true | Student_answersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student_answersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student_answersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student_answersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student_answersMaxAggregateInputType
  }

  export type GetStudent_answersAggregateType<T extends Student_answersAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent_answers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent_answers[P]>
      : GetScalarType<T[P], AggregateStudent_answers[P]>
  }




  export type student_answersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_answersWhereInput
    orderBy?: student_answersOrderByWithAggregationInput | student_answersOrderByWithAggregationInput[]
    by: Student_answersScalarFieldEnum[] | Student_answersScalarFieldEnum
    having?: student_answersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student_answersCountAggregateInputType | true
    _avg?: Student_answersAvgAggregateInputType
    _sum?: Student_answersSumAggregateInputType
    _min?: Student_answersMinAggregateInputType
    _max?: Student_answersMaxAggregateInputType
  }

  export type Student_answersGroupByOutputType = {
    id_student_answer: number
    id_attempt: number
    id_question: number
    student_answer_text: string | null
    correct: number
    _count: Student_answersCountAggregateOutputType | null
    _avg: Student_answersAvgAggregateOutputType | null
    _sum: Student_answersSumAggregateOutputType | null
    _min: Student_answersMinAggregateOutputType | null
    _max: Student_answersMaxAggregateOutputType | null
  }

  type GetStudent_answersGroupByPayload<T extends student_answersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student_answersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student_answersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student_answersGroupByOutputType[P]>
            : GetScalarType<T[P], Student_answersGroupByOutputType[P]>
        }
      >
    >


  export type student_answersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_student_answer?: boolean
    id_attempt?: boolean
    id_question?: boolean
    student_answer_text?: boolean
    correct?: boolean
    attempts?: boolean | attemptsDefaultArgs<ExtArgs>
    questions?: boolean | questionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_answers"]>



  export type student_answersSelectScalar = {
    id_student_answer?: boolean
    id_attempt?: boolean
    id_question?: boolean
    student_answer_text?: boolean
    correct?: boolean
  }

  export type student_answersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_student_answer" | "id_attempt" | "id_question" | "student_answer_text" | "correct", ExtArgs["result"]["student_answers"]>
  export type student_answersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | attemptsDefaultArgs<ExtArgs>
    questions?: boolean | questionsDefaultArgs<ExtArgs>
  }

  export type $student_answersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "student_answers"
    objects: {
      attempts: Prisma.$attemptsPayload<ExtArgs>
      questions: Prisma.$questionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_student_answer: number
      id_attempt: number
      id_question: number
      student_answer_text: string | null
      correct: number
    }, ExtArgs["result"]["student_answers"]>
    composites: {}
  }

  type student_answersGetPayload<S extends boolean | null | undefined | student_answersDefaultArgs> = $Result.GetResult<Prisma.$student_answersPayload, S>

  type student_answersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<student_answersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Student_answersCountAggregateInputType | true
    }

  export interface student_answersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['student_answers'], meta: { name: 'student_answers' } }
    /**
     * Find zero or one Student_answers that matches the filter.
     * @param {student_answersFindUniqueArgs} args - Arguments to find a Student_answers
     * @example
     * // Get one Student_answers
     * const student_answers = await prisma.student_answers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends student_answersFindUniqueArgs>(args: SelectSubset<T, student_answersFindUniqueArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student_answers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {student_answersFindUniqueOrThrowArgs} args - Arguments to find a Student_answers
     * @example
     * // Get one Student_answers
     * const student_answers = await prisma.student_answers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends student_answersFindUniqueOrThrowArgs>(args: SelectSubset<T, student_answersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student_answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_answersFindFirstArgs} args - Arguments to find a Student_answers
     * @example
     * // Get one Student_answers
     * const student_answers = await prisma.student_answers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends student_answersFindFirstArgs>(args?: SelectSubset<T, student_answersFindFirstArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student_answers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_answersFindFirstOrThrowArgs} args - Arguments to find a Student_answers
     * @example
     * // Get one Student_answers
     * const student_answers = await prisma.student_answers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends student_answersFindFirstOrThrowArgs>(args?: SelectSubset<T, student_answersFindFirstOrThrowArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Student_answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_answersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student_answers
     * const student_answers = await prisma.student_answers.findMany()
     * 
     * // Get first 10 Student_answers
     * const student_answers = await prisma.student_answers.findMany({ take: 10 })
     * 
     * // Only select the `id_student_answer`
     * const student_answersWithId_student_answerOnly = await prisma.student_answers.findMany({ select: { id_student_answer: true } })
     * 
     */
    findMany<T extends student_answersFindManyArgs>(args?: SelectSubset<T, student_answersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student_answers.
     * @param {student_answersCreateArgs} args - Arguments to create a Student_answers.
     * @example
     * // Create one Student_answers
     * const Student_answers = await prisma.student_answers.create({
     *   data: {
     *     // ... data to create a Student_answers
     *   }
     * })
     * 
     */
    create<T extends student_answersCreateArgs>(args: SelectSubset<T, student_answersCreateArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Student_answers.
     * @param {student_answersCreateManyArgs} args - Arguments to create many Student_answers.
     * @example
     * // Create many Student_answers
     * const student_answers = await prisma.student_answers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends student_answersCreateManyArgs>(args?: SelectSubset<T, student_answersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student_answers.
     * @param {student_answersDeleteArgs} args - Arguments to delete one Student_answers.
     * @example
     * // Delete one Student_answers
     * const Student_answers = await prisma.student_answers.delete({
     *   where: {
     *     // ... filter to delete one Student_answers
     *   }
     * })
     * 
     */
    delete<T extends student_answersDeleteArgs>(args: SelectSubset<T, student_answersDeleteArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student_answers.
     * @param {student_answersUpdateArgs} args - Arguments to update one Student_answers.
     * @example
     * // Update one Student_answers
     * const student_answers = await prisma.student_answers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends student_answersUpdateArgs>(args: SelectSubset<T, student_answersUpdateArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Student_answers.
     * @param {student_answersDeleteManyArgs} args - Arguments to filter Student_answers to delete.
     * @example
     * // Delete a few Student_answers
     * const { count } = await prisma.student_answers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends student_answersDeleteManyArgs>(args?: SelectSubset<T, student_answersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_answersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student_answers
     * const student_answers = await prisma.student_answers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends student_answersUpdateManyArgs>(args: SelectSubset<T, student_answersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student_answers.
     * @param {student_answersUpsertArgs} args - Arguments to update or create a Student_answers.
     * @example
     * // Update or create a Student_answers
     * const student_answers = await prisma.student_answers.upsert({
     *   create: {
     *     // ... data to create a Student_answers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student_answers we want to update
     *   }
     * })
     */
    upsert<T extends student_answersUpsertArgs>(args: SelectSubset<T, student_answersUpsertArgs<ExtArgs>>): Prisma__student_answersClient<$Result.GetResult<Prisma.$student_answersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Student_answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_answersCountArgs} args - Arguments to filter Student_answers to count.
     * @example
     * // Count the number of Student_answers
     * const count = await prisma.student_answers.count({
     *   where: {
     *     // ... the filter for the Student_answers we want to count
     *   }
     * })
    **/
    count<T extends student_answersCountArgs>(
      args?: Subset<T, student_answersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student_answersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student_answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_answersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student_answersAggregateArgs>(args: Subset<T, Student_answersAggregateArgs>): Prisma.PrismaPromise<GetStudent_answersAggregateType<T>>

    /**
     * Group by Student_answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_answersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends student_answersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: student_answersGroupByArgs['orderBy'] }
        : { orderBy?: student_answersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, student_answersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent_answersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the student_answers model
   */
  readonly fields: student_answersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for student_answers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__student_answersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attempts<T extends attemptsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, attemptsDefaultArgs<ExtArgs>>): Prisma__attemptsClient<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends questionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, questionsDefaultArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the student_answers model
   */ 
  interface student_answersFieldRefs {
    readonly id_student_answer: FieldRef<"student_answers", 'Int'>
    readonly id_attempt: FieldRef<"student_answers", 'Int'>
    readonly id_question: FieldRef<"student_answers", 'Int'>
    readonly student_answer_text: FieldRef<"student_answers", 'String'>
    readonly correct: FieldRef<"student_answers", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * student_answers findUnique
   */
  export type student_answersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * Filter, which student_answers to fetch.
     */
    where: student_answersWhereUniqueInput
  }

  /**
   * student_answers findUniqueOrThrow
   */
  export type student_answersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * Filter, which student_answers to fetch.
     */
    where: student_answersWhereUniqueInput
  }

  /**
   * student_answers findFirst
   */
  export type student_answersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * Filter, which student_answers to fetch.
     */
    where?: student_answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_answers to fetch.
     */
    orderBy?: student_answersOrderByWithRelationInput | student_answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for student_answers.
     */
    cursor?: student_answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of student_answers.
     */
    distinct?: Student_answersScalarFieldEnum | Student_answersScalarFieldEnum[]
  }

  /**
   * student_answers findFirstOrThrow
   */
  export type student_answersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * Filter, which student_answers to fetch.
     */
    where?: student_answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_answers to fetch.
     */
    orderBy?: student_answersOrderByWithRelationInput | student_answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for student_answers.
     */
    cursor?: student_answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of student_answers.
     */
    distinct?: Student_answersScalarFieldEnum | Student_answersScalarFieldEnum[]
  }

  /**
   * student_answers findMany
   */
  export type student_answersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * Filter, which student_answers to fetch.
     */
    where?: student_answersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_answers to fetch.
     */
    orderBy?: student_answersOrderByWithRelationInput | student_answersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing student_answers.
     */
    cursor?: student_answersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_answers.
     */
    skip?: number
    distinct?: Student_answersScalarFieldEnum | Student_answersScalarFieldEnum[]
  }

  /**
   * student_answers create
   */
  export type student_answersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * The data needed to create a student_answers.
     */
    data: XOR<student_answersCreateInput, student_answersUncheckedCreateInput>
  }

  /**
   * student_answers createMany
   */
  export type student_answersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many student_answers.
     */
    data: student_answersCreateManyInput | student_answersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * student_answers update
   */
  export type student_answersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * The data needed to update a student_answers.
     */
    data: XOR<student_answersUpdateInput, student_answersUncheckedUpdateInput>
    /**
     * Choose, which student_answers to update.
     */
    where: student_answersWhereUniqueInput
  }

  /**
   * student_answers updateMany
   */
  export type student_answersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update student_answers.
     */
    data: XOR<student_answersUpdateManyMutationInput, student_answersUncheckedUpdateManyInput>
    /**
     * Filter which student_answers to update
     */
    where?: student_answersWhereInput
    /**
     * Limit how many student_answers to update.
     */
    limit?: number
  }

  /**
   * student_answers upsert
   */
  export type student_answersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * The filter to search for the student_answers to update in case it exists.
     */
    where: student_answersWhereUniqueInput
    /**
     * In case the student_answers found by the `where` argument doesn't exist, create a new student_answers with this data.
     */
    create: XOR<student_answersCreateInput, student_answersUncheckedCreateInput>
    /**
     * In case the student_answers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<student_answersUpdateInput, student_answersUncheckedUpdateInput>
  }

  /**
   * student_answers delete
   */
  export type student_answersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
    /**
     * Filter which student_answers to delete.
     */
    where: student_answersWhereUniqueInput
  }

  /**
   * student_answers deleteMany
   */
  export type student_answersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student_answers to delete
     */
    where?: student_answersWhereInput
    /**
     * Limit how many student_answers to delete.
     */
    limit?: number
  }

  /**
   * student_answers without action
   */
  export type student_answersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_answers
     */
    select?: student_answersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_answers
     */
    omit?: student_answersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_answersInclude<ExtArgs> | null
  }


  /**
   * Model students
   */

  export type AggregateStudents = {
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  export type StudentsAvgAggregateOutputType = {
    id_student: number | null
    annee: number | null
    groupe_student: number | null
  }

  export type StudentsSumAggregateOutputType = {
    id_student: number | null
    annee: number | null
    groupe_student: number | null
  }

  export type StudentsMinAggregateOutputType = {
    id_student: number | null
    first_name: string | null
    last_name: string | null
    annee: number | null
    groupe_student: number | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type StudentsMaxAggregateOutputType = {
    id_student: number | null
    first_name: string | null
    last_name: string | null
    annee: number | null
    groupe_student: number | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type StudentsCountAggregateOutputType = {
    id_student: number
    first_name: number
    last_name: number
    annee: number
    groupe_student: number
    email: number
    password: number
    created_at: number
    _all: number
  }


  export type StudentsAvgAggregateInputType = {
    id_student?: true
    annee?: true
    groupe_student?: true
  }

  export type StudentsSumAggregateInputType = {
    id_student?: true
    annee?: true
    groupe_student?: true
  }

  export type StudentsMinAggregateInputType = {
    id_student?: true
    first_name?: true
    last_name?: true
    annee?: true
    groupe_student?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type StudentsMaxAggregateInputType = {
    id_student?: true
    first_name?: true
    last_name?: true
    annee?: true
    groupe_student?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type StudentsCountAggregateInputType = {
    id_student?: true
    first_name?: true
    last_name?: true
    annee?: true
    groupe_student?: true
    email?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type StudentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students to aggregate.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsMaxAggregateInputType
  }

  export type GetStudentsAggregateType<T extends StudentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudents[P]>
      : GetScalarType<T[P], AggregateStudents[P]>
  }




  export type studentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentsWhereInput
    orderBy?: studentsOrderByWithAggregationInput | studentsOrderByWithAggregationInput[]
    by: StudentsScalarFieldEnum[] | StudentsScalarFieldEnum
    having?: studentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsCountAggregateInputType | true
    _avg?: StudentsAvgAggregateInputType
    _sum?: StudentsSumAggregateInputType
    _min?: StudentsMinAggregateInputType
    _max?: StudentsMaxAggregateInputType
  }

  export type StudentsGroupByOutputType = {
    id_student: number
    first_name: string
    last_name: string
    annee: number
    groupe_student: number
    email: string
    password: string
    created_at: Date
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  type GetStudentsGroupByPayload<T extends studentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsGroupByOutputType[P]>
        }
      >
    >


  export type studentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_student?: boolean
    first_name?: boolean
    last_name?: boolean
    annee?: boolean
    groupe_student?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    attempts?: boolean | students$attemptsArgs<ExtArgs>
    _count?: boolean | StudentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students"]>



  export type studentsSelectScalar = {
    id_student?: boolean
    first_name?: boolean
    last_name?: boolean
    annee?: boolean
    groupe_student?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }

  export type studentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_student" | "first_name" | "last_name" | "annee" | "groupe_student" | "email" | "password" | "created_at", ExtArgs["result"]["students"]>
  export type studentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | students$attemptsArgs<ExtArgs>
    _count?: boolean | StudentsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $studentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "students"
    objects: {
      attempts: Prisma.$attemptsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_student: number
      first_name: string
      last_name: string
      annee: number
      groupe_student: number
      email: string
      password: string
      created_at: Date
    }, ExtArgs["result"]["students"]>
    composites: {}
  }

  type studentsGetPayload<S extends boolean | null | undefined | studentsDefaultArgs> = $Result.GetResult<Prisma.$studentsPayload, S>

  type studentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<studentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentsCountAggregateInputType | true
    }

  export interface studentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['students'], meta: { name: 'students' } }
    /**
     * Find zero or one Students that matches the filter.
     * @param {studentsFindUniqueArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends studentsFindUniqueArgs>(args: SelectSubset<T, studentsFindUniqueArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Students that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {studentsFindUniqueOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends studentsFindUniqueOrThrowArgs>(args: SelectSubset<T, studentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindFirstArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends studentsFindFirstArgs>(args?: SelectSubset<T, studentsFindFirstArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindFirstOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends studentsFindFirstOrThrowArgs>(args?: SelectSubset<T, studentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.students.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.students.findMany({ take: 10 })
     * 
     * // Only select the `id_student`
     * const studentsWithId_studentOnly = await prisma.students.findMany({ select: { id_student: true } })
     * 
     */
    findMany<T extends studentsFindManyArgs>(args?: SelectSubset<T, studentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Students.
     * @param {studentsCreateArgs} args - Arguments to create a Students.
     * @example
     * // Create one Students
     * const Students = await prisma.students.create({
     *   data: {
     *     // ... data to create a Students
     *   }
     * })
     * 
     */
    create<T extends studentsCreateArgs>(args: SelectSubset<T, studentsCreateArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {studentsCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const students = await prisma.students.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends studentsCreateManyArgs>(args?: SelectSubset<T, studentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Students.
     * @param {studentsDeleteArgs} args - Arguments to delete one Students.
     * @example
     * // Delete one Students
     * const Students = await prisma.students.delete({
     *   where: {
     *     // ... filter to delete one Students
     *   }
     * })
     * 
     */
    delete<T extends studentsDeleteArgs>(args: SelectSubset<T, studentsDeleteArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Students.
     * @param {studentsUpdateArgs} args - Arguments to update one Students.
     * @example
     * // Update one Students
     * const students = await prisma.students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends studentsUpdateArgs>(args: SelectSubset<T, studentsUpdateArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {studentsDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends studentsDeleteManyArgs>(args?: SelectSubset<T, studentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends studentsUpdateManyArgs>(args: SelectSubset<T, studentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Students.
     * @param {studentsUpsertArgs} args - Arguments to update or create a Students.
     * @example
     * // Update or create a Students
     * const students = await prisma.students.upsert({
     *   create: {
     *     // ... data to create a Students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Students we want to update
     *   }
     * })
     */
    upsert<T extends studentsUpsertArgs>(args: SelectSubset<T, studentsUpsertArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.students.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentsCountArgs>(
      args?: Subset<T, studentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsAggregateArgs>(args: Subset<T, StudentsAggregateArgs>): Prisma.PrismaPromise<GetStudentsAggregateType<T>>

    /**
     * Group by Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studentsGroupByArgs['orderBy'] }
        : { orderBy?: studentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the students model
   */
  readonly fields: studentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attempts<T extends students$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, students$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attemptsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the students model
   */ 
  interface studentsFieldRefs {
    readonly id_student: FieldRef<"students", 'Int'>
    readonly first_name: FieldRef<"students", 'String'>
    readonly last_name: FieldRef<"students", 'String'>
    readonly annee: FieldRef<"students", 'Int'>
    readonly groupe_student: FieldRef<"students", 'Int'>
    readonly email: FieldRef<"students", 'String'>
    readonly password: FieldRef<"students", 'String'>
    readonly created_at: FieldRef<"students", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * students findUnique
   */
  export type studentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students findUniqueOrThrow
   */
  export type studentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students findFirst
   */
  export type studentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * students findFirstOrThrow
   */
  export type studentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * students findMany
   */
  export type studentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * students create
   */
  export type studentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * The data needed to create a students.
     */
    data: XOR<studentsCreateInput, studentsUncheckedCreateInput>
  }

  /**
   * students createMany
   */
  export type studentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many students.
     */
    data: studentsCreateManyInput | studentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * students update
   */
  export type studentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * The data needed to update a students.
     */
    data: XOR<studentsUpdateInput, studentsUncheckedUpdateInput>
    /**
     * Choose, which students to update.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students updateMany
   */
  export type studentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update students.
     */
    data: XOR<studentsUpdateManyMutationInput, studentsUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     */
    where?: studentsWhereInput
    /**
     * Limit how many students to update.
     */
    limit?: number
  }

  /**
   * students upsert
   */
  export type studentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * The filter to search for the students to update in case it exists.
     */
    where: studentsWhereUniqueInput
    /**
     * In case the students found by the `where` argument doesn't exist, create a new students with this data.
     */
    create: XOR<studentsCreateInput, studentsUncheckedCreateInput>
    /**
     * In case the students was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studentsUpdateInput, studentsUncheckedUpdateInput>
  }

  /**
   * students delete
   */
  export type studentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter which students to delete.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students deleteMany
   */
  export type studentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students to delete
     */
    where?: studentsWhereInput
    /**
     * Limit how many students to delete.
     */
    limit?: number
  }

  /**
   * students.attempts
   */
  export type students$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attempts
     */
    select?: attemptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attempts
     */
    omit?: attemptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attemptsInclude<ExtArgs> | null
    where?: attemptsWhereInput
    orderBy?: attemptsOrderByWithRelationInput | attemptsOrderByWithRelationInput[]
    cursor?: attemptsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttemptsScalarFieldEnum | AttemptsScalarFieldEnum[]
  }

  /**
   * students without action
   */
  export type studentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
  }


  /**
   * Model teachers
   */

  export type AggregateTeachers = {
    _count: TeachersCountAggregateOutputType | null
    _avg: TeachersAvgAggregateOutputType | null
    _sum: TeachersSumAggregateOutputType | null
    _min: TeachersMinAggregateOutputType | null
    _max: TeachersMaxAggregateOutputType | null
  }

  export type TeachersAvgAggregateOutputType = {
    id_teacher: number | null
  }

  export type TeachersSumAggregateOutputType = {
    id_teacher: number | null
  }

  export type TeachersMinAggregateOutputType = {
    id_teacher: number | null
    last_name: string | null
    first_name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type TeachersMaxAggregateOutputType = {
    id_teacher: number | null
    last_name: string | null
    first_name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type TeachersCountAggregateOutputType = {
    id_teacher: number
    last_name: number
    first_name: number
    email: number
    password: number
    created_at: number
    _all: number
  }


  export type TeachersAvgAggregateInputType = {
    id_teacher?: true
  }

  export type TeachersSumAggregateInputType = {
    id_teacher?: true
  }

  export type TeachersMinAggregateInputType = {
    id_teacher?: true
    last_name?: true
    first_name?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type TeachersMaxAggregateInputType = {
    id_teacher?: true
    last_name?: true
    first_name?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type TeachersCountAggregateInputType = {
    id_teacher?: true
    last_name?: true
    first_name?: true
    email?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type TeachersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teachers to aggregate.
     */
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     */
    orderBy?: teachersOrderByWithRelationInput | teachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teachers
    **/
    _count?: true | TeachersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersMaxAggregateInputType
  }

  export type GetTeachersAggregateType<T extends TeachersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachers[P]>
      : GetScalarType<T[P], AggregateTeachers[P]>
  }




  export type teachersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teachersWhereInput
    orderBy?: teachersOrderByWithAggregationInput | teachersOrderByWithAggregationInput[]
    by: TeachersScalarFieldEnum[] | TeachersScalarFieldEnum
    having?: teachersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersCountAggregateInputType | true
    _avg?: TeachersAvgAggregateInputType
    _sum?: TeachersSumAggregateInputType
    _min?: TeachersMinAggregateInputType
    _max?: TeachersMaxAggregateInputType
  }

  export type TeachersGroupByOutputType = {
    id_teacher: number
    last_name: string
    first_name: string
    email: string
    password: string
    created_at: Date
    _count: TeachersCountAggregateOutputType | null
    _avg: TeachersAvgAggregateOutputType | null
    _sum: TeachersSumAggregateOutputType | null
    _min: TeachersMinAggregateOutputType | null
    _max: TeachersMaxAggregateOutputType | null
  }

  type GetTeachersGroupByPayload<T extends teachersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeachersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersGroupByOutputType[P]>
        }
      >
    >


  export type teachersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_teacher?: boolean
    last_name?: boolean
    first_name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    quizzes?: boolean | teachers$quizzesArgs<ExtArgs>
    _count?: boolean | TeachersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachers"]>



  export type teachersSelectScalar = {
    id_teacher?: boolean
    last_name?: boolean
    first_name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }

  export type teachersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_teacher" | "last_name" | "first_name" | "email" | "password" | "created_at", ExtArgs["result"]["teachers"]>
  export type teachersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | teachers$quizzesArgs<ExtArgs>
    _count?: boolean | TeachersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $teachersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "teachers"
    objects: {
      quizzes: Prisma.$quizzesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_teacher: number
      last_name: string
      first_name: string
      email: string
      password: string
      created_at: Date
    }, ExtArgs["result"]["teachers"]>
    composites: {}
  }

  type teachersGetPayload<S extends boolean | null | undefined | teachersDefaultArgs> = $Result.GetResult<Prisma.$teachersPayload, S>

  type teachersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<teachersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeachersCountAggregateInputType | true
    }

  export interface teachersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['teachers'], meta: { name: 'teachers' } }
    /**
     * Find zero or one Teachers that matches the filter.
     * @param {teachersFindUniqueArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teachersFindUniqueArgs>(args: SelectSubset<T, teachersFindUniqueArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teachers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {teachersFindUniqueOrThrowArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teachersFindUniqueOrThrowArgs>(args: SelectSubset<T, teachersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersFindFirstArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teachersFindFirstArgs>(args?: SelectSubset<T, teachersFindFirstArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teachers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersFindFirstOrThrowArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teachersFindFirstOrThrowArgs>(args?: SelectSubset<T, teachersFindFirstOrThrowArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teachers.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teachers.findMany({ take: 10 })
     * 
     * // Only select the `id_teacher`
     * const teachersWithId_teacherOnly = await prisma.teachers.findMany({ select: { id_teacher: true } })
     * 
     */
    findMany<T extends teachersFindManyArgs>(args?: SelectSubset<T, teachersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teachers.
     * @param {teachersCreateArgs} args - Arguments to create a Teachers.
     * @example
     * // Create one Teachers
     * const Teachers = await prisma.teachers.create({
     *   data: {
     *     // ... data to create a Teachers
     *   }
     * })
     * 
     */
    create<T extends teachersCreateArgs>(args: SelectSubset<T, teachersCreateArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {teachersCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teachers = await prisma.teachers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teachersCreateManyArgs>(args?: SelectSubset<T, teachersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teachers.
     * @param {teachersDeleteArgs} args - Arguments to delete one Teachers.
     * @example
     * // Delete one Teachers
     * const Teachers = await prisma.teachers.delete({
     *   where: {
     *     // ... filter to delete one Teachers
     *   }
     * })
     * 
     */
    delete<T extends teachersDeleteArgs>(args: SelectSubset<T, teachersDeleteArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teachers.
     * @param {teachersUpdateArgs} args - Arguments to update one Teachers.
     * @example
     * // Update one Teachers
     * const teachers = await prisma.teachers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teachersUpdateArgs>(args: SelectSubset<T, teachersUpdateArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {teachersDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teachers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teachersDeleteManyArgs>(args?: SelectSubset<T, teachersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teachers = await prisma.teachers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teachersUpdateManyArgs>(args: SelectSubset<T, teachersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teachers.
     * @param {teachersUpsertArgs} args - Arguments to update or create a Teachers.
     * @example
     * // Update or create a Teachers
     * const teachers = await prisma.teachers.upsert({
     *   create: {
     *     // ... data to create a Teachers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teachers we want to update
     *   }
     * })
     */
    upsert<T extends teachersUpsertArgs>(args: SelectSubset<T, teachersUpsertArgs<ExtArgs>>): Prisma__teachersClient<$Result.GetResult<Prisma.$teachersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teachers.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends teachersCountArgs>(
      args?: Subset<T, teachersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersAggregateArgs>(args: Subset<T, TeachersAggregateArgs>): Prisma.PrismaPromise<GetTeachersAggregateType<T>>

    /**
     * Group by Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teachersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teachersGroupByArgs['orderBy'] }
        : { orderBy?: teachersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teachersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the teachers model
   */
  readonly fields: teachersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for teachers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teachersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quizzes<T extends teachers$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, teachers$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the teachers model
   */ 
  interface teachersFieldRefs {
    readonly id_teacher: FieldRef<"teachers", 'Int'>
    readonly last_name: FieldRef<"teachers", 'String'>
    readonly first_name: FieldRef<"teachers", 'String'>
    readonly email: FieldRef<"teachers", 'String'>
    readonly password: FieldRef<"teachers", 'String'>
    readonly created_at: FieldRef<"teachers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * teachers findUnique
   */
  export type teachersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * Filter, which teachers to fetch.
     */
    where: teachersWhereUniqueInput
  }

  /**
   * teachers findUniqueOrThrow
   */
  export type teachersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * Filter, which teachers to fetch.
     */
    where: teachersWhereUniqueInput
  }

  /**
   * teachers findFirst
   */
  export type teachersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * Filter, which teachers to fetch.
     */
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     */
    orderBy?: teachersOrderByWithRelationInput | teachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teachers.
     */
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teachers.
     */
    distinct?: TeachersScalarFieldEnum | TeachersScalarFieldEnum[]
  }

  /**
   * teachers findFirstOrThrow
   */
  export type teachersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * Filter, which teachers to fetch.
     */
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     */
    orderBy?: teachersOrderByWithRelationInput | teachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teachers.
     */
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teachers.
     */
    distinct?: TeachersScalarFieldEnum | TeachersScalarFieldEnum[]
  }

  /**
   * teachers findMany
   */
  export type teachersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * Filter, which teachers to fetch.
     */
    where?: teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers to fetch.
     */
    orderBy?: teachersOrderByWithRelationInput | teachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teachers.
     */
    cursor?: teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers.
     */
    skip?: number
    distinct?: TeachersScalarFieldEnum | TeachersScalarFieldEnum[]
  }

  /**
   * teachers create
   */
  export type teachersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * The data needed to create a teachers.
     */
    data: XOR<teachersCreateInput, teachersUncheckedCreateInput>
  }

  /**
   * teachers createMany
   */
  export type teachersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teachers.
     */
    data: teachersCreateManyInput | teachersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teachers update
   */
  export type teachersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * The data needed to update a teachers.
     */
    data: XOR<teachersUpdateInput, teachersUncheckedUpdateInput>
    /**
     * Choose, which teachers to update.
     */
    where: teachersWhereUniqueInput
  }

  /**
   * teachers updateMany
   */
  export type teachersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teachers.
     */
    data: XOR<teachersUpdateManyMutationInput, teachersUncheckedUpdateManyInput>
    /**
     * Filter which teachers to update
     */
    where?: teachersWhereInput
    /**
     * Limit how many teachers to update.
     */
    limit?: number
  }

  /**
   * teachers upsert
   */
  export type teachersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * The filter to search for the teachers to update in case it exists.
     */
    where: teachersWhereUniqueInput
    /**
     * In case the teachers found by the `where` argument doesn't exist, create a new teachers with this data.
     */
    create: XOR<teachersCreateInput, teachersUncheckedCreateInput>
    /**
     * In case the teachers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teachersUpdateInput, teachersUncheckedUpdateInput>
  }

  /**
   * teachers delete
   */
  export type teachersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
    /**
     * Filter which teachers to delete.
     */
    where: teachersWhereUniqueInput
  }

  /**
   * teachers deleteMany
   */
  export type teachersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teachers to delete
     */
    where?: teachersWhereInput
    /**
     * Limit how many teachers to delete.
     */
    limit?: number
  }

  /**
   * teachers.quizzes
   */
  export type teachers$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    cursor?: quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * teachers without action
   */
  export type teachersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teachers
     */
    select?: teachersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teachers
     */
    omit?: teachersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teachersInclude<ExtArgs> | null
  }


  /**
   * Model admins
   */

  export type AggregateAdmins = {
    _count: AdminsCountAggregateOutputType | null
    _avg: AdminsAvgAggregateOutputType | null
    _sum: AdminsSumAggregateOutputType | null
    _min: AdminsMinAggregateOutputType | null
    _max: AdminsMaxAggregateOutputType | null
  }

  export type AdminsAvgAggregateOutputType = {
    id_admin: number | null
  }

  export type AdminsSumAggregateOutputType = {
    id_admin: number | null
  }

  export type AdminsMinAggregateOutputType = {
    id_admin: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type AdminsMaxAggregateOutputType = {
    id_admin: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
  }

  export type AdminsCountAggregateOutputType = {
    id_admin: number
    first_name: number
    last_name: number
    email: number
    password: number
    created_at: number
    _all: number
  }


  export type AdminsAvgAggregateInputType = {
    id_admin?: true
  }

  export type AdminsSumAggregateInputType = {
    id_admin?: true
  }

  export type AdminsMinAggregateInputType = {
    id_admin?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type AdminsMaxAggregateInputType = {
    id_admin?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    created_at?: true
  }

  export type AdminsCountAggregateInputType = {
    id_admin?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type AdminsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admins to aggregate.
     */
    where?: adminsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminsOrderByWithRelationInput | adminsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adminsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admins
    **/
    _count?: true | AdminsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminsMaxAggregateInputType
  }

  export type GetAdminsAggregateType<T extends AdminsAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmins]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmins[P]>
      : GetScalarType<T[P], AggregateAdmins[P]>
  }




  export type adminsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adminsWhereInput
    orderBy?: adminsOrderByWithAggregationInput | adminsOrderByWithAggregationInput[]
    by: AdminsScalarFieldEnum[] | AdminsScalarFieldEnum
    having?: adminsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminsCountAggregateInputType | true
    _avg?: AdminsAvgAggregateInputType
    _sum?: AdminsSumAggregateInputType
    _min?: AdminsMinAggregateInputType
    _max?: AdminsMaxAggregateInputType
  }

  export type AdminsGroupByOutputType = {
    id_admin: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at: Date
    _count: AdminsCountAggregateOutputType | null
    _avg: AdminsAvgAggregateOutputType | null
    _sum: AdminsSumAggregateOutputType | null
    _min: AdminsMinAggregateOutputType | null
    _max: AdminsMaxAggregateOutputType | null
  }

  type GetAdminsGroupByPayload<T extends adminsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminsGroupByOutputType[P]>
            : GetScalarType<T[P], AdminsGroupByOutputType[P]>
        }
      >
    >


  export type adminsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_admin?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["admins"]>



  export type adminsSelectScalar = {
    id_admin?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
  }

  export type adminsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_admin" | "first_name" | "last_name" | "email" | "password" | "created_at", ExtArgs["result"]["admins"]>

  export type $adminsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "admins"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_admin: number
      first_name: string
      last_name: string
      email: string
      password: string
      created_at: Date
    }, ExtArgs["result"]["admins"]>
    composites: {}
  }

  type adminsGetPayload<S extends boolean | null | undefined | adminsDefaultArgs> = $Result.GetResult<Prisma.$adminsPayload, S>

  type adminsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<adminsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminsCountAggregateInputType | true
    }

  export interface adminsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['admins'], meta: { name: 'admins' } }
    /**
     * Find zero or one Admins that matches the filter.
     * @param {adminsFindUniqueArgs} args - Arguments to find a Admins
     * @example
     * // Get one Admins
     * const admins = await prisma.admins.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adminsFindUniqueArgs>(args: SelectSubset<T, adminsFindUniqueArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admins that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {adminsFindUniqueOrThrowArgs} args - Arguments to find a Admins
     * @example
     * // Get one Admins
     * const admins = await prisma.admins.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adminsFindUniqueOrThrowArgs>(args: SelectSubset<T, adminsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminsFindFirstArgs} args - Arguments to find a Admins
     * @example
     * // Get one Admins
     * const admins = await prisma.admins.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adminsFindFirstArgs>(args?: SelectSubset<T, adminsFindFirstArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admins that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminsFindFirstOrThrowArgs} args - Arguments to find a Admins
     * @example
     * // Get one Admins
     * const admins = await prisma.admins.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adminsFindFirstOrThrowArgs>(args?: SelectSubset<T, adminsFindFirstOrThrowArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admins.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admins.findMany({ take: 10 })
     * 
     * // Only select the `id_admin`
     * const adminsWithId_adminOnly = await prisma.admins.findMany({ select: { id_admin: true } })
     * 
     */
    findMany<T extends adminsFindManyArgs>(args?: SelectSubset<T, adminsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admins.
     * @param {adminsCreateArgs} args - Arguments to create a Admins.
     * @example
     * // Create one Admins
     * const Admins = await prisma.admins.create({
     *   data: {
     *     // ... data to create a Admins
     *   }
     * })
     * 
     */
    create<T extends adminsCreateArgs>(args: SelectSubset<T, adminsCreateArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {adminsCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admins = await prisma.admins.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adminsCreateManyArgs>(args?: SelectSubset<T, adminsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admins.
     * @param {adminsDeleteArgs} args - Arguments to delete one Admins.
     * @example
     * // Delete one Admins
     * const Admins = await prisma.admins.delete({
     *   where: {
     *     // ... filter to delete one Admins
     *   }
     * })
     * 
     */
    delete<T extends adminsDeleteArgs>(args: SelectSubset<T, adminsDeleteArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admins.
     * @param {adminsUpdateArgs} args - Arguments to update one Admins.
     * @example
     * // Update one Admins
     * const admins = await prisma.admins.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adminsUpdateArgs>(args: SelectSubset<T, adminsUpdateArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {adminsDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admins.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adminsDeleteManyArgs>(args?: SelectSubset<T, adminsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admins = await prisma.admins.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adminsUpdateManyArgs>(args: SelectSubset<T, adminsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admins.
     * @param {adminsUpsertArgs} args - Arguments to update or create a Admins.
     * @example
     * // Update or create a Admins
     * const admins = await prisma.admins.upsert({
     *   create: {
     *     // ... data to create a Admins
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admins we want to update
     *   }
     * })
     */
    upsert<T extends adminsUpsertArgs>(args: SelectSubset<T, adminsUpsertArgs<ExtArgs>>): Prisma__adminsClient<$Result.GetResult<Prisma.$adminsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminsCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admins.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends adminsCountArgs>(
      args?: Subset<T, adminsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminsAggregateArgs>(args: Subset<T, AdminsAggregateArgs>): Prisma.PrismaPromise<GetAdminsAggregateType<T>>

    /**
     * Group by Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adminsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adminsGroupByArgs['orderBy'] }
        : { orderBy?: adminsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adminsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the admins model
   */
  readonly fields: adminsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for admins.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adminsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the admins model
   */ 
  interface adminsFieldRefs {
    readonly id_admin: FieldRef<"admins", 'Int'>
    readonly first_name: FieldRef<"admins", 'String'>
    readonly last_name: FieldRef<"admins", 'String'>
    readonly email: FieldRef<"admins", 'String'>
    readonly password: FieldRef<"admins", 'String'>
    readonly created_at: FieldRef<"admins", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * admins findUnique
   */
  export type adminsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where: adminsWhereUniqueInput
  }

  /**
   * admins findUniqueOrThrow
   */
  export type adminsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where: adminsWhereUniqueInput
  }

  /**
   * admins findFirst
   */
  export type adminsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where?: adminsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminsOrderByWithRelationInput | adminsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminsScalarFieldEnum | AdminsScalarFieldEnum[]
  }

  /**
   * admins findFirstOrThrow
   */
  export type adminsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where?: adminsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminsOrderByWithRelationInput | adminsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminsScalarFieldEnum | AdminsScalarFieldEnum[]
  }

  /**
   * admins findMany
   */
  export type adminsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where?: adminsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminsOrderByWithRelationInput | adminsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admins.
     */
    cursor?: adminsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    distinct?: AdminsScalarFieldEnum | AdminsScalarFieldEnum[]
  }

  /**
   * admins create
   */
  export type adminsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * The data needed to create a admins.
     */
    data: XOR<adminsCreateInput, adminsUncheckedCreateInput>
  }

  /**
   * admins createMany
   */
  export type adminsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many admins.
     */
    data: adminsCreateManyInput | adminsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * admins update
   */
  export type adminsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * The data needed to update a admins.
     */
    data: XOR<adminsUpdateInput, adminsUncheckedUpdateInput>
    /**
     * Choose, which admins to update.
     */
    where: adminsWhereUniqueInput
  }

  /**
   * admins updateMany
   */
  export type adminsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update admins.
     */
    data: XOR<adminsUpdateManyMutationInput, adminsUncheckedUpdateManyInput>
    /**
     * Filter which admins to update
     */
    where?: adminsWhereInput
    /**
     * Limit how many admins to update.
     */
    limit?: number
  }

  /**
   * admins upsert
   */
  export type adminsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * The filter to search for the admins to update in case it exists.
     */
    where: adminsWhereUniqueInput
    /**
     * In case the admins found by the `where` argument doesn't exist, create a new admins with this data.
     */
    create: XOR<adminsCreateInput, adminsUncheckedCreateInput>
    /**
     * In case the admins was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adminsUpdateInput, adminsUncheckedUpdateInput>
  }

  /**
   * admins delete
   */
  export type adminsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
    /**
     * Filter which admins to delete.
     */
    where: adminsWhereUniqueInput
  }

  /**
   * admins deleteMany
   */
  export type adminsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admins to delete
     */
    where?: adminsWhereInput
    /**
     * Limit how many admins to delete.
     */
    limit?: number
  }

  /**
   * admins without action
   */
  export type adminsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admins
     */
    select?: adminsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the admins
     */
    omit?: adminsOmit<ExtArgs> | null
  }


  /**
   * Model published_quizzes
   */

  export type AggregatePublished_quizzes = {
    _count: Published_quizzesCountAggregateOutputType | null
    _avg: Published_quizzesAvgAggregateOutputType | null
    _sum: Published_quizzesSumAggregateOutputType | null
    _min: Published_quizzesMinAggregateOutputType | null
    _max: Published_quizzesMaxAggregateOutputType | null
  }

  export type Published_quizzesAvgAggregateOutputType = {
    id_published: number | null
    id_quiz: number | null
    student_number: number | null
  }

  export type Published_quizzesSumAggregateOutputType = {
    id_published: number | null
    id_quiz: number | null
    student_number: number | null
  }

  export type Published_quizzesMinAggregateOutputType = {
    id_published: number | null
    id_quiz: number | null
    student_number: number | null
    published_at: Date | null
  }

  export type Published_quizzesMaxAggregateOutputType = {
    id_published: number | null
    id_quiz: number | null
    student_number: number | null
    published_at: Date | null
  }

  export type Published_quizzesCountAggregateOutputType = {
    id_published: number
    id_quiz: number
    student_number: number
    published_at: number
    _all: number
  }


  export type Published_quizzesAvgAggregateInputType = {
    id_published?: true
    id_quiz?: true
    student_number?: true
  }

  export type Published_quizzesSumAggregateInputType = {
    id_published?: true
    id_quiz?: true
    student_number?: true
  }

  export type Published_quizzesMinAggregateInputType = {
    id_published?: true
    id_quiz?: true
    student_number?: true
    published_at?: true
  }

  export type Published_quizzesMaxAggregateInputType = {
    id_published?: true
    id_quiz?: true
    student_number?: true
    published_at?: true
  }

  export type Published_quizzesCountAggregateInputType = {
    id_published?: true
    id_quiz?: true
    student_number?: true
    published_at?: true
    _all?: true
  }

  export type Published_quizzesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which published_quizzes to aggregate.
     */
    where?: published_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of published_quizzes to fetch.
     */
    orderBy?: published_quizzesOrderByWithRelationInput | published_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: published_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` published_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` published_quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned published_quizzes
    **/
    _count?: true | Published_quizzesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Published_quizzesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Published_quizzesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Published_quizzesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Published_quizzesMaxAggregateInputType
  }

  export type GetPublished_quizzesAggregateType<T extends Published_quizzesAggregateArgs> = {
        [P in keyof T & keyof AggregatePublished_quizzes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublished_quizzes[P]>
      : GetScalarType<T[P], AggregatePublished_quizzes[P]>
  }




  export type published_quizzesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: published_quizzesWhereInput
    orderBy?: published_quizzesOrderByWithAggregationInput | published_quizzesOrderByWithAggregationInput[]
    by: Published_quizzesScalarFieldEnum[] | Published_quizzesScalarFieldEnum
    having?: published_quizzesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Published_quizzesCountAggregateInputType | true
    _avg?: Published_quizzesAvgAggregateInputType
    _sum?: Published_quizzesSumAggregateInputType
    _min?: Published_quizzesMinAggregateInputType
    _max?: Published_quizzesMaxAggregateInputType
  }

  export type Published_quizzesGroupByOutputType = {
    id_published: number
    id_quiz: number
    student_number: number
    published_at: Date
    _count: Published_quizzesCountAggregateOutputType | null
    _avg: Published_quizzesAvgAggregateOutputType | null
    _sum: Published_quizzesSumAggregateOutputType | null
    _min: Published_quizzesMinAggregateOutputType | null
    _max: Published_quizzesMaxAggregateOutputType | null
  }

  type GetPublished_quizzesGroupByPayload<T extends published_quizzesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Published_quizzesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Published_quizzesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Published_quizzesGroupByOutputType[P]>
            : GetScalarType<T[P], Published_quizzesGroupByOutputType[P]>
        }
      >
    >


  export type published_quizzesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_published?: boolean
    id_quiz?: boolean
    student_number?: boolean
    published_at?: boolean
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["published_quizzes"]>



  export type published_quizzesSelectScalar = {
    id_published?: boolean
    id_quiz?: boolean
    student_number?: boolean
    published_at?: boolean
  }

  export type published_quizzesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_published" | "id_quiz" | "student_number" | "published_at", ExtArgs["result"]["published_quizzes"]>
  export type published_quizzesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | quizzesDefaultArgs<ExtArgs>
  }

  export type $published_quizzesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "published_quizzes"
    objects: {
      quizzes: Prisma.$quizzesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_published: number
      id_quiz: number
      student_number: number
      published_at: Date
    }, ExtArgs["result"]["published_quizzes"]>
    composites: {}
  }

  type published_quizzesGetPayload<S extends boolean | null | undefined | published_quizzesDefaultArgs> = $Result.GetResult<Prisma.$published_quizzesPayload, S>

  type published_quizzesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<published_quizzesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Published_quizzesCountAggregateInputType | true
    }

  export interface published_quizzesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['published_quizzes'], meta: { name: 'published_quizzes' } }
    /**
     * Find zero or one Published_quizzes that matches the filter.
     * @param {published_quizzesFindUniqueArgs} args - Arguments to find a Published_quizzes
     * @example
     * // Get one Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends published_quizzesFindUniqueArgs>(args: SelectSubset<T, published_quizzesFindUniqueArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Published_quizzes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {published_quizzesFindUniqueOrThrowArgs} args - Arguments to find a Published_quizzes
     * @example
     * // Get one Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends published_quizzesFindUniqueOrThrowArgs>(args: SelectSubset<T, published_quizzesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Published_quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {published_quizzesFindFirstArgs} args - Arguments to find a Published_quizzes
     * @example
     * // Get one Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends published_quizzesFindFirstArgs>(args?: SelectSubset<T, published_quizzesFindFirstArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Published_quizzes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {published_quizzesFindFirstOrThrowArgs} args - Arguments to find a Published_quizzes
     * @example
     * // Get one Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends published_quizzesFindFirstOrThrowArgs>(args?: SelectSubset<T, published_quizzesFindFirstOrThrowArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Published_quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {published_quizzesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.findMany()
     * 
     * // Get first 10 Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.findMany({ take: 10 })
     * 
     * // Only select the `id_published`
     * const published_quizzesWithId_publishedOnly = await prisma.published_quizzes.findMany({ select: { id_published: true } })
     * 
     */
    findMany<T extends published_quizzesFindManyArgs>(args?: SelectSubset<T, published_quizzesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Published_quizzes.
     * @param {published_quizzesCreateArgs} args - Arguments to create a Published_quizzes.
     * @example
     * // Create one Published_quizzes
     * const Published_quizzes = await prisma.published_quizzes.create({
     *   data: {
     *     // ... data to create a Published_quizzes
     *   }
     * })
     * 
     */
    create<T extends published_quizzesCreateArgs>(args: SelectSubset<T, published_quizzesCreateArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Published_quizzes.
     * @param {published_quizzesCreateManyArgs} args - Arguments to create many Published_quizzes.
     * @example
     * // Create many Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends published_quizzesCreateManyArgs>(args?: SelectSubset<T, published_quizzesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Published_quizzes.
     * @param {published_quizzesDeleteArgs} args - Arguments to delete one Published_quizzes.
     * @example
     * // Delete one Published_quizzes
     * const Published_quizzes = await prisma.published_quizzes.delete({
     *   where: {
     *     // ... filter to delete one Published_quizzes
     *   }
     * })
     * 
     */
    delete<T extends published_quizzesDeleteArgs>(args: SelectSubset<T, published_quizzesDeleteArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Published_quizzes.
     * @param {published_quizzesUpdateArgs} args - Arguments to update one Published_quizzes.
     * @example
     * // Update one Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends published_quizzesUpdateArgs>(args: SelectSubset<T, published_quizzesUpdateArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Published_quizzes.
     * @param {published_quizzesDeleteManyArgs} args - Arguments to filter Published_quizzes to delete.
     * @example
     * // Delete a few Published_quizzes
     * const { count } = await prisma.published_quizzes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends published_quizzesDeleteManyArgs>(args?: SelectSubset<T, published_quizzesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Published_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {published_quizzesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends published_quizzesUpdateManyArgs>(args: SelectSubset<T, published_quizzesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Published_quizzes.
     * @param {published_quizzesUpsertArgs} args - Arguments to update or create a Published_quizzes.
     * @example
     * // Update or create a Published_quizzes
     * const published_quizzes = await prisma.published_quizzes.upsert({
     *   create: {
     *     // ... data to create a Published_quizzes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Published_quizzes we want to update
     *   }
     * })
     */
    upsert<T extends published_quizzesUpsertArgs>(args: SelectSubset<T, published_quizzesUpsertArgs<ExtArgs>>): Prisma__published_quizzesClient<$Result.GetResult<Prisma.$published_quizzesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Published_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {published_quizzesCountArgs} args - Arguments to filter Published_quizzes to count.
     * @example
     * // Count the number of Published_quizzes
     * const count = await prisma.published_quizzes.count({
     *   where: {
     *     // ... the filter for the Published_quizzes we want to count
     *   }
     * })
    **/
    count<T extends published_quizzesCountArgs>(
      args?: Subset<T, published_quizzesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Published_quizzesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Published_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Published_quizzesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Published_quizzesAggregateArgs>(args: Subset<T, Published_quizzesAggregateArgs>): Prisma.PrismaPromise<GetPublished_quizzesAggregateType<T>>

    /**
     * Group by Published_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {published_quizzesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends published_quizzesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: published_quizzesGroupByArgs['orderBy'] }
        : { orderBy?: published_quizzesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, published_quizzesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublished_quizzesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the published_quizzes model
   */
  readonly fields: published_quizzesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for published_quizzes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__published_quizzesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quizzes<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the published_quizzes model
   */ 
  interface published_quizzesFieldRefs {
    readonly id_published: FieldRef<"published_quizzes", 'Int'>
    readonly id_quiz: FieldRef<"published_quizzes", 'Int'>
    readonly student_number: FieldRef<"published_quizzes", 'Int'>
    readonly published_at: FieldRef<"published_quizzes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * published_quizzes findUnique
   */
  export type published_quizzesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which published_quizzes to fetch.
     */
    where: published_quizzesWhereUniqueInput
  }

  /**
   * published_quizzes findUniqueOrThrow
   */
  export type published_quizzesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which published_quizzes to fetch.
     */
    where: published_quizzesWhereUniqueInput
  }

  /**
   * published_quizzes findFirst
   */
  export type published_quizzesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which published_quizzes to fetch.
     */
    where?: published_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of published_quizzes to fetch.
     */
    orderBy?: published_quizzesOrderByWithRelationInput | published_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for published_quizzes.
     */
    cursor?: published_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` published_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` published_quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of published_quizzes.
     */
    distinct?: Published_quizzesScalarFieldEnum | Published_quizzesScalarFieldEnum[]
  }

  /**
   * published_quizzes findFirstOrThrow
   */
  export type published_quizzesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which published_quizzes to fetch.
     */
    where?: published_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of published_quizzes to fetch.
     */
    orderBy?: published_quizzesOrderByWithRelationInput | published_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for published_quizzes.
     */
    cursor?: published_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` published_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` published_quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of published_quizzes.
     */
    distinct?: Published_quizzesScalarFieldEnum | Published_quizzesScalarFieldEnum[]
  }

  /**
   * published_quizzes findMany
   */
  export type published_quizzesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which published_quizzes to fetch.
     */
    where?: published_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of published_quizzes to fetch.
     */
    orderBy?: published_quizzesOrderByWithRelationInput | published_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing published_quizzes.
     */
    cursor?: published_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` published_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` published_quizzes.
     */
    skip?: number
    distinct?: Published_quizzesScalarFieldEnum | Published_quizzesScalarFieldEnum[]
  }

  /**
   * published_quizzes create
   */
  export type published_quizzesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * The data needed to create a published_quizzes.
     */
    data: XOR<published_quizzesCreateInput, published_quizzesUncheckedCreateInput>
  }

  /**
   * published_quizzes createMany
   */
  export type published_quizzesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many published_quizzes.
     */
    data: published_quizzesCreateManyInput | published_quizzesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * published_quizzes update
   */
  export type published_quizzesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * The data needed to update a published_quizzes.
     */
    data: XOR<published_quizzesUpdateInput, published_quizzesUncheckedUpdateInput>
    /**
     * Choose, which published_quizzes to update.
     */
    where: published_quizzesWhereUniqueInput
  }

  /**
   * published_quizzes updateMany
   */
  export type published_quizzesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update published_quizzes.
     */
    data: XOR<published_quizzesUpdateManyMutationInput, published_quizzesUncheckedUpdateManyInput>
    /**
     * Filter which published_quizzes to update
     */
    where?: published_quizzesWhereInput
    /**
     * Limit how many published_quizzes to update.
     */
    limit?: number
  }

  /**
   * published_quizzes upsert
   */
  export type published_quizzesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * The filter to search for the published_quizzes to update in case it exists.
     */
    where: published_quizzesWhereUniqueInput
    /**
     * In case the published_quizzes found by the `where` argument doesn't exist, create a new published_quizzes with this data.
     */
    create: XOR<published_quizzesCreateInput, published_quizzesUncheckedCreateInput>
    /**
     * In case the published_quizzes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<published_quizzesUpdateInput, published_quizzesUncheckedUpdateInput>
  }

  /**
   * published_quizzes delete
   */
  export type published_quizzesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
    /**
     * Filter which published_quizzes to delete.
     */
    where: published_quizzesWhereUniqueInput
  }

  /**
   * published_quizzes deleteMany
   */
  export type published_quizzesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which published_quizzes to delete
     */
    where?: published_quizzesWhereInput
    /**
     * Limit how many published_quizzes to delete.
     */
    limit?: number
  }

  /**
   * published_quizzes without action
   */
  export type published_quizzesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the published_quizzes
     */
    select?: published_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the published_quizzes
     */
    omit?: published_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: published_quizzesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AnswersScalarFieldEnum: {
    id_answer: 'id_answer',
    id_question: 'id_question',
    answer_text: 'answer_text',
    correct: 'correct'
  };

  export type AnswersScalarFieldEnum = (typeof AnswersScalarFieldEnum)[keyof typeof AnswersScalarFieldEnum]


  export const AttemptsScalarFieldEnum: {
    id_attempt: 'id_attempt',
    id_student: 'id_student',
    id_quiz: 'id_quiz',
    corrected: 'corrected',
    score: 'score',
    attempt_at: 'attempt_at'
  };

  export type AttemptsScalarFieldEnum = (typeof AttemptsScalarFieldEnum)[keyof typeof AttemptsScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id_question: 'id_question',
    id_quiz: 'id_quiz',
    duration: 'duration',
    question_text: 'question_text',
    question_number: 'question_number',
    points: 'points',
    question_type: 'question_type',
    created_at: 'created_at',
    question_percentage: 'question_percentage'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const QuizzesScalarFieldEnum: {
    id_quiz: 'id_quiz',
    title: 'title',
    description: 'description',
    duration: 'duration',
    correctionType: 'correctionType',
    id_teacher: 'id_teacher',
    subject: 'subject',
    status: 'status',
    score: 'score',
    for_year: 'for_year',
    for_groupe: 'for_groupe',
    created_at: 'created_at',
    nb_attempts: 'nb_attempts'
  };

  export type QuizzesScalarFieldEnum = (typeof QuizzesScalarFieldEnum)[keyof typeof QuizzesScalarFieldEnum]


  export const Student_answersScalarFieldEnum: {
    id_student_answer: 'id_student_answer',
    id_attempt: 'id_attempt',
    id_question: 'id_question',
    student_answer_text: 'student_answer_text',
    correct: 'correct'
  };

  export type Student_answersScalarFieldEnum = (typeof Student_answersScalarFieldEnum)[keyof typeof Student_answersScalarFieldEnum]


  export const StudentsScalarFieldEnum: {
    id_student: 'id_student',
    first_name: 'first_name',
    last_name: 'last_name',
    annee: 'annee',
    groupe_student: 'groupe_student',
    email: 'email',
    password: 'password',
    created_at: 'created_at'
  };

  export type StudentsScalarFieldEnum = (typeof StudentsScalarFieldEnum)[keyof typeof StudentsScalarFieldEnum]


  export const TeachersScalarFieldEnum: {
    id_teacher: 'id_teacher',
    last_name: 'last_name',
    first_name: 'first_name',
    email: 'email',
    password: 'password',
    created_at: 'created_at'
  };

  export type TeachersScalarFieldEnum = (typeof TeachersScalarFieldEnum)[keyof typeof TeachersScalarFieldEnum]


  export const AdminsScalarFieldEnum: {
    id_admin: 'id_admin',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    password: 'password',
    created_at: 'created_at'
  };

  export type AdminsScalarFieldEnum = (typeof AdminsScalarFieldEnum)[keyof typeof AdminsScalarFieldEnum]


  export const Published_quizzesScalarFieldEnum: {
    id_published: 'id_published',
    id_quiz: 'id_quiz',
    student_number: 'student_number',
    published_at: 'published_at'
  };

  export type Published_quizzesScalarFieldEnum = (typeof Published_quizzesScalarFieldEnum)[keyof typeof Published_quizzesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const answersOrderByRelevanceFieldEnum: {
    answer_text: 'answer_text'
  };

  export type answersOrderByRelevanceFieldEnum = (typeof answersOrderByRelevanceFieldEnum)[keyof typeof answersOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const questionsOrderByRelevanceFieldEnum: {
    question_text: 'question_text',
    question_type: 'question_type'
  };

  export type questionsOrderByRelevanceFieldEnum = (typeof questionsOrderByRelevanceFieldEnum)[keyof typeof questionsOrderByRelevanceFieldEnum]


  export const quizzesOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    correctionType: 'correctionType',
    subject: 'subject',
    status: 'status'
  };

  export type quizzesOrderByRelevanceFieldEnum = (typeof quizzesOrderByRelevanceFieldEnum)[keyof typeof quizzesOrderByRelevanceFieldEnum]


  export const student_answersOrderByRelevanceFieldEnum: {
    student_answer_text: 'student_answer_text'
  };

  export type student_answersOrderByRelevanceFieldEnum = (typeof student_answersOrderByRelevanceFieldEnum)[keyof typeof student_answersOrderByRelevanceFieldEnum]


  export const studentsOrderByRelevanceFieldEnum: {
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    password: 'password'
  };

  export type studentsOrderByRelevanceFieldEnum = (typeof studentsOrderByRelevanceFieldEnum)[keyof typeof studentsOrderByRelevanceFieldEnum]


  export const teachersOrderByRelevanceFieldEnum: {
    last_name: 'last_name',
    first_name: 'first_name',
    email: 'email',
    password: 'password'
  };

  export type teachersOrderByRelevanceFieldEnum = (typeof teachersOrderByRelevanceFieldEnum)[keyof typeof teachersOrderByRelevanceFieldEnum]


  export const adminsOrderByRelevanceFieldEnum: {
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    password: 'password'
  };

  export type adminsOrderByRelevanceFieldEnum = (typeof adminsOrderByRelevanceFieldEnum)[keyof typeof adminsOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type answersWhereInput = {
    AND?: answersWhereInput | answersWhereInput[]
    OR?: answersWhereInput[]
    NOT?: answersWhereInput | answersWhereInput[]
    id_answer?: IntFilter<"answers"> | number
    id_question?: IntFilter<"answers"> | number
    answer_text?: StringFilter<"answers"> | string
    correct?: IntFilter<"answers"> | number
    questions?: XOR<QuestionsScalarRelationFilter, questionsWhereInput>
  }

  export type answersOrderByWithRelationInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    answer_text?: SortOrder
    correct?: SortOrder
    questions?: questionsOrderByWithRelationInput
    _relevance?: answersOrderByRelevanceInput
  }

  export type answersWhereUniqueInput = Prisma.AtLeast<{
    id_answer?: number
    AND?: answersWhereInput | answersWhereInput[]
    OR?: answersWhereInput[]
    NOT?: answersWhereInput | answersWhereInput[]
    id_question?: IntFilter<"answers"> | number
    answer_text?: StringFilter<"answers"> | string
    correct?: IntFilter<"answers"> | number
    questions?: XOR<QuestionsScalarRelationFilter, questionsWhereInput>
  }, "id_answer">

  export type answersOrderByWithAggregationInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    answer_text?: SortOrder
    correct?: SortOrder
    _count?: answersCountOrderByAggregateInput
    _avg?: answersAvgOrderByAggregateInput
    _max?: answersMaxOrderByAggregateInput
    _min?: answersMinOrderByAggregateInput
    _sum?: answersSumOrderByAggregateInput
  }

  export type answersScalarWhereWithAggregatesInput = {
    AND?: answersScalarWhereWithAggregatesInput | answersScalarWhereWithAggregatesInput[]
    OR?: answersScalarWhereWithAggregatesInput[]
    NOT?: answersScalarWhereWithAggregatesInput | answersScalarWhereWithAggregatesInput[]
    id_answer?: IntWithAggregatesFilter<"answers"> | number
    id_question?: IntWithAggregatesFilter<"answers"> | number
    answer_text?: StringWithAggregatesFilter<"answers"> | string
    correct?: IntWithAggregatesFilter<"answers"> | number
  }

  export type attemptsWhereInput = {
    AND?: attemptsWhereInput | attemptsWhereInput[]
    OR?: attemptsWhereInput[]
    NOT?: attemptsWhereInput | attemptsWhereInput[]
    id_attempt?: IntFilter<"attempts"> | number
    id_student?: IntFilter<"attempts"> | number
    id_quiz?: IntFilter<"attempts"> | number
    corrected?: IntFilter<"attempts"> | number
    score?: FloatFilter<"attempts"> | number
    attempt_at?: DateTimeFilter<"attempts"> | Date | string
    students?: XOR<StudentsScalarRelationFilter, studentsWhereInput>
    quizzes?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
    student_answers?: Student_answersListRelationFilter
  }

  export type attemptsOrderByWithRelationInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
    attempt_at?: SortOrder
    students?: studentsOrderByWithRelationInput
    quizzes?: quizzesOrderByWithRelationInput
    student_answers?: student_answersOrderByRelationAggregateInput
  }

  export type attemptsWhereUniqueInput = Prisma.AtLeast<{
    id_attempt?: number
    AND?: attemptsWhereInput | attemptsWhereInput[]
    OR?: attemptsWhereInput[]
    NOT?: attemptsWhereInput | attemptsWhereInput[]
    id_student?: IntFilter<"attempts"> | number
    id_quiz?: IntFilter<"attempts"> | number
    corrected?: IntFilter<"attempts"> | number
    score?: FloatFilter<"attempts"> | number
    attempt_at?: DateTimeFilter<"attempts"> | Date | string
    students?: XOR<StudentsScalarRelationFilter, studentsWhereInput>
    quizzes?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
    student_answers?: Student_answersListRelationFilter
  }, "id_attempt">

  export type attemptsOrderByWithAggregationInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
    attempt_at?: SortOrder
    _count?: attemptsCountOrderByAggregateInput
    _avg?: attemptsAvgOrderByAggregateInput
    _max?: attemptsMaxOrderByAggregateInput
    _min?: attemptsMinOrderByAggregateInput
    _sum?: attemptsSumOrderByAggregateInput
  }

  export type attemptsScalarWhereWithAggregatesInput = {
    AND?: attemptsScalarWhereWithAggregatesInput | attemptsScalarWhereWithAggregatesInput[]
    OR?: attemptsScalarWhereWithAggregatesInput[]
    NOT?: attemptsScalarWhereWithAggregatesInput | attemptsScalarWhereWithAggregatesInput[]
    id_attempt?: IntWithAggregatesFilter<"attempts"> | number
    id_student?: IntWithAggregatesFilter<"attempts"> | number
    id_quiz?: IntWithAggregatesFilter<"attempts"> | number
    corrected?: IntWithAggregatesFilter<"attempts"> | number
    score?: FloatWithAggregatesFilter<"attempts"> | number
    attempt_at?: DateTimeWithAggregatesFilter<"attempts"> | Date | string
  }

  export type questionsWhereInput = {
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    id_question?: IntFilter<"questions"> | number
    id_quiz?: IntFilter<"questions"> | number
    duration?: IntNullableFilter<"questions"> | number | null
    question_text?: StringFilter<"questions"> | string
    question_number?: IntFilter<"questions"> | number
    points?: FloatFilter<"questions"> | number
    question_type?: StringFilter<"questions"> | string
    created_at?: DateTimeFilter<"questions"> | Date | string
    question_percentage?: IntFilter<"questions"> | number
    answers?: AnswersListRelationFilter
    quizzes?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
    student_answers?: Student_answersListRelationFilter
  }

  export type questionsOrderByWithRelationInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrderInput | SortOrder
    question_text?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_type?: SortOrder
    created_at?: SortOrder
    question_percentage?: SortOrder
    answers?: answersOrderByRelationAggregateInput
    quizzes?: quizzesOrderByWithRelationInput
    student_answers?: student_answersOrderByRelationAggregateInput
    _relevance?: questionsOrderByRelevanceInput
  }

  export type questionsWhereUniqueInput = Prisma.AtLeast<{
    id_question?: number
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    id_quiz?: IntFilter<"questions"> | number
    duration?: IntNullableFilter<"questions"> | number | null
    question_text?: StringFilter<"questions"> | string
    question_number?: IntFilter<"questions"> | number
    points?: FloatFilter<"questions"> | number
    question_type?: StringFilter<"questions"> | string
    created_at?: DateTimeFilter<"questions"> | Date | string
    question_percentage?: IntFilter<"questions"> | number
    answers?: AnswersListRelationFilter
    quizzes?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
    student_answers?: Student_answersListRelationFilter
  }, "id_question">

  export type questionsOrderByWithAggregationInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrderInput | SortOrder
    question_text?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_type?: SortOrder
    created_at?: SortOrder
    question_percentage?: SortOrder
    _count?: questionsCountOrderByAggregateInput
    _avg?: questionsAvgOrderByAggregateInput
    _max?: questionsMaxOrderByAggregateInput
    _min?: questionsMinOrderByAggregateInput
    _sum?: questionsSumOrderByAggregateInput
  }

  export type questionsScalarWhereWithAggregatesInput = {
    AND?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    OR?: questionsScalarWhereWithAggregatesInput[]
    NOT?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    id_question?: IntWithAggregatesFilter<"questions"> | number
    id_quiz?: IntWithAggregatesFilter<"questions"> | number
    duration?: IntNullableWithAggregatesFilter<"questions"> | number | null
    question_text?: StringWithAggregatesFilter<"questions"> | string
    question_number?: IntWithAggregatesFilter<"questions"> | number
    points?: FloatWithAggregatesFilter<"questions"> | number
    question_type?: StringWithAggregatesFilter<"questions"> | string
    created_at?: DateTimeWithAggregatesFilter<"questions"> | Date | string
    question_percentage?: IntWithAggregatesFilter<"questions"> | number
  }

  export type quizzesWhereInput = {
    AND?: quizzesWhereInput | quizzesWhereInput[]
    OR?: quizzesWhereInput[]
    NOT?: quizzesWhereInput | quizzesWhereInput[]
    id_quiz?: IntFilter<"quizzes"> | number
    title?: StringFilter<"quizzes"> | string
    description?: StringNullableFilter<"quizzes"> | string | null
    duration?: IntNullableFilter<"quizzes"> | number | null
    correctionType?: StringFilter<"quizzes"> | string
    id_teacher?: IntFilter<"quizzes"> | number
    subject?: StringFilter<"quizzes"> | string
    status?: StringFilter<"quizzes"> | string
    score?: FloatFilter<"quizzes"> | number
    for_year?: IntNullableFilter<"quizzes"> | number | null
    for_groupe?: IntNullableFilter<"quizzes"> | number | null
    created_at?: DateTimeFilter<"quizzes"> | Date | string
    nb_attempts?: IntFilter<"quizzes"> | number
    attempts?: AttemptsListRelationFilter
    published_quizzes?: Published_quizzesListRelationFilter
    questions?: QuestionsListRelationFilter
    teachers?: XOR<TeachersScalarRelationFilter, teachersWhereInput>
  }

  export type quizzesOrderByWithRelationInput = {
    id_quiz?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    correctionType?: SortOrder
    id_teacher?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    score?: SortOrder
    for_year?: SortOrderInput | SortOrder
    for_groupe?: SortOrderInput | SortOrder
    created_at?: SortOrder
    nb_attempts?: SortOrder
    attempts?: attemptsOrderByRelationAggregateInput
    published_quizzes?: published_quizzesOrderByRelationAggregateInput
    questions?: questionsOrderByRelationAggregateInput
    teachers?: teachersOrderByWithRelationInput
    _relevance?: quizzesOrderByRelevanceInput
  }

  export type quizzesWhereUniqueInput = Prisma.AtLeast<{
    id_quiz?: number
    AND?: quizzesWhereInput | quizzesWhereInput[]
    OR?: quizzesWhereInput[]
    NOT?: quizzesWhereInput | quizzesWhereInput[]
    title?: StringFilter<"quizzes"> | string
    description?: StringNullableFilter<"quizzes"> | string | null
    duration?: IntNullableFilter<"quizzes"> | number | null
    correctionType?: StringFilter<"quizzes"> | string
    id_teacher?: IntFilter<"quizzes"> | number
    subject?: StringFilter<"quizzes"> | string
    status?: StringFilter<"quizzes"> | string
    score?: FloatFilter<"quizzes"> | number
    for_year?: IntNullableFilter<"quizzes"> | number | null
    for_groupe?: IntNullableFilter<"quizzes"> | number | null
    created_at?: DateTimeFilter<"quizzes"> | Date | string
    nb_attempts?: IntFilter<"quizzes"> | number
    attempts?: AttemptsListRelationFilter
    published_quizzes?: Published_quizzesListRelationFilter
    questions?: QuestionsListRelationFilter
    teachers?: XOR<TeachersScalarRelationFilter, teachersWhereInput>
  }, "id_quiz">

  export type quizzesOrderByWithAggregationInput = {
    id_quiz?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    correctionType?: SortOrder
    id_teacher?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    score?: SortOrder
    for_year?: SortOrderInput | SortOrder
    for_groupe?: SortOrderInput | SortOrder
    created_at?: SortOrder
    nb_attempts?: SortOrder
    _count?: quizzesCountOrderByAggregateInput
    _avg?: quizzesAvgOrderByAggregateInput
    _max?: quizzesMaxOrderByAggregateInput
    _min?: quizzesMinOrderByAggregateInput
    _sum?: quizzesSumOrderByAggregateInput
  }

  export type quizzesScalarWhereWithAggregatesInput = {
    AND?: quizzesScalarWhereWithAggregatesInput | quizzesScalarWhereWithAggregatesInput[]
    OR?: quizzesScalarWhereWithAggregatesInput[]
    NOT?: quizzesScalarWhereWithAggregatesInput | quizzesScalarWhereWithAggregatesInput[]
    id_quiz?: IntWithAggregatesFilter<"quizzes"> | number
    title?: StringWithAggregatesFilter<"quizzes"> | string
    description?: StringNullableWithAggregatesFilter<"quizzes"> | string | null
    duration?: IntNullableWithAggregatesFilter<"quizzes"> | number | null
    correctionType?: StringWithAggregatesFilter<"quizzes"> | string
    id_teacher?: IntWithAggregatesFilter<"quizzes"> | number
    subject?: StringWithAggregatesFilter<"quizzes"> | string
    status?: StringWithAggregatesFilter<"quizzes"> | string
    score?: FloatWithAggregatesFilter<"quizzes"> | number
    for_year?: IntNullableWithAggregatesFilter<"quizzes"> | number | null
    for_groupe?: IntNullableWithAggregatesFilter<"quizzes"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"quizzes"> | Date | string
    nb_attempts?: IntWithAggregatesFilter<"quizzes"> | number
  }

  export type student_answersWhereInput = {
    AND?: student_answersWhereInput | student_answersWhereInput[]
    OR?: student_answersWhereInput[]
    NOT?: student_answersWhereInput | student_answersWhereInput[]
    id_student_answer?: IntFilter<"student_answers"> | number
    id_attempt?: IntFilter<"student_answers"> | number
    id_question?: IntFilter<"student_answers"> | number
    student_answer_text?: StringNullableFilter<"student_answers"> | string | null
    correct?: IntFilter<"student_answers"> | number
    attempts?: XOR<AttemptsScalarRelationFilter, attemptsWhereInput>
    questions?: XOR<QuestionsScalarRelationFilter, questionsWhereInput>
  }

  export type student_answersOrderByWithRelationInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    student_answer_text?: SortOrderInput | SortOrder
    correct?: SortOrder
    attempts?: attemptsOrderByWithRelationInput
    questions?: questionsOrderByWithRelationInput
    _relevance?: student_answersOrderByRelevanceInput
  }

  export type student_answersWhereUniqueInput = Prisma.AtLeast<{
    id_student_answer?: number
    AND?: student_answersWhereInput | student_answersWhereInput[]
    OR?: student_answersWhereInput[]
    NOT?: student_answersWhereInput | student_answersWhereInput[]
    id_attempt?: IntFilter<"student_answers"> | number
    id_question?: IntFilter<"student_answers"> | number
    student_answer_text?: StringNullableFilter<"student_answers"> | string | null
    correct?: IntFilter<"student_answers"> | number
    attempts?: XOR<AttemptsScalarRelationFilter, attemptsWhereInput>
    questions?: XOR<QuestionsScalarRelationFilter, questionsWhereInput>
  }, "id_student_answer">

  export type student_answersOrderByWithAggregationInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    student_answer_text?: SortOrderInput | SortOrder
    correct?: SortOrder
    _count?: student_answersCountOrderByAggregateInput
    _avg?: student_answersAvgOrderByAggregateInput
    _max?: student_answersMaxOrderByAggregateInput
    _min?: student_answersMinOrderByAggregateInput
    _sum?: student_answersSumOrderByAggregateInput
  }

  export type student_answersScalarWhereWithAggregatesInput = {
    AND?: student_answersScalarWhereWithAggregatesInput | student_answersScalarWhereWithAggregatesInput[]
    OR?: student_answersScalarWhereWithAggregatesInput[]
    NOT?: student_answersScalarWhereWithAggregatesInput | student_answersScalarWhereWithAggregatesInput[]
    id_student_answer?: IntWithAggregatesFilter<"student_answers"> | number
    id_attempt?: IntWithAggregatesFilter<"student_answers"> | number
    id_question?: IntWithAggregatesFilter<"student_answers"> | number
    student_answer_text?: StringNullableWithAggregatesFilter<"student_answers"> | string | null
    correct?: IntWithAggregatesFilter<"student_answers"> | number
  }

  export type studentsWhereInput = {
    AND?: studentsWhereInput | studentsWhereInput[]
    OR?: studentsWhereInput[]
    NOT?: studentsWhereInput | studentsWhereInput[]
    id_student?: IntFilter<"students"> | number
    first_name?: StringFilter<"students"> | string
    last_name?: StringFilter<"students"> | string
    annee?: IntFilter<"students"> | number
    groupe_student?: IntFilter<"students"> | number
    email?: StringFilter<"students"> | string
    password?: StringFilter<"students"> | string
    created_at?: DateTimeFilter<"students"> | Date | string
    attempts?: AttemptsListRelationFilter
  }

  export type studentsOrderByWithRelationInput = {
    id_student?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    attempts?: attemptsOrderByRelationAggregateInput
    _relevance?: studentsOrderByRelevanceInput
  }

  export type studentsWhereUniqueInput = Prisma.AtLeast<{
    id_student?: number
    email?: string
    AND?: studentsWhereInput | studentsWhereInput[]
    OR?: studentsWhereInput[]
    NOT?: studentsWhereInput | studentsWhereInput[]
    first_name?: StringFilter<"students"> | string
    last_name?: StringFilter<"students"> | string
    annee?: IntFilter<"students"> | number
    groupe_student?: IntFilter<"students"> | number
    password?: StringFilter<"students"> | string
    created_at?: DateTimeFilter<"students"> | Date | string
    attempts?: AttemptsListRelationFilter
  }, "id_student" | "email">

  export type studentsOrderByWithAggregationInput = {
    id_student?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: studentsCountOrderByAggregateInput
    _avg?: studentsAvgOrderByAggregateInput
    _max?: studentsMaxOrderByAggregateInput
    _min?: studentsMinOrderByAggregateInput
    _sum?: studentsSumOrderByAggregateInput
  }

  export type studentsScalarWhereWithAggregatesInput = {
    AND?: studentsScalarWhereWithAggregatesInput | studentsScalarWhereWithAggregatesInput[]
    OR?: studentsScalarWhereWithAggregatesInput[]
    NOT?: studentsScalarWhereWithAggregatesInput | studentsScalarWhereWithAggregatesInput[]
    id_student?: IntWithAggregatesFilter<"students"> | number
    first_name?: StringWithAggregatesFilter<"students"> | string
    last_name?: StringWithAggregatesFilter<"students"> | string
    annee?: IntWithAggregatesFilter<"students"> | number
    groupe_student?: IntWithAggregatesFilter<"students"> | number
    email?: StringWithAggregatesFilter<"students"> | string
    password?: StringWithAggregatesFilter<"students"> | string
    created_at?: DateTimeWithAggregatesFilter<"students"> | Date | string
  }

  export type teachersWhereInput = {
    AND?: teachersWhereInput | teachersWhereInput[]
    OR?: teachersWhereInput[]
    NOT?: teachersWhereInput | teachersWhereInput[]
    id_teacher?: IntFilter<"teachers"> | number
    last_name?: StringFilter<"teachers"> | string
    first_name?: StringFilter<"teachers"> | string
    email?: StringFilter<"teachers"> | string
    password?: StringFilter<"teachers"> | string
    created_at?: DateTimeFilter<"teachers"> | Date | string
    quizzes?: QuizzesListRelationFilter
  }

  export type teachersOrderByWithRelationInput = {
    id_teacher?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    quizzes?: quizzesOrderByRelationAggregateInput
    _relevance?: teachersOrderByRelevanceInput
  }

  export type teachersWhereUniqueInput = Prisma.AtLeast<{
    id_teacher?: number
    email?: string
    AND?: teachersWhereInput | teachersWhereInput[]
    OR?: teachersWhereInput[]
    NOT?: teachersWhereInput | teachersWhereInput[]
    last_name?: StringFilter<"teachers"> | string
    first_name?: StringFilter<"teachers"> | string
    password?: StringFilter<"teachers"> | string
    created_at?: DateTimeFilter<"teachers"> | Date | string
    quizzes?: QuizzesListRelationFilter
  }, "id_teacher" | "email">

  export type teachersOrderByWithAggregationInput = {
    id_teacher?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: teachersCountOrderByAggregateInput
    _avg?: teachersAvgOrderByAggregateInput
    _max?: teachersMaxOrderByAggregateInput
    _min?: teachersMinOrderByAggregateInput
    _sum?: teachersSumOrderByAggregateInput
  }

  export type teachersScalarWhereWithAggregatesInput = {
    AND?: teachersScalarWhereWithAggregatesInput | teachersScalarWhereWithAggregatesInput[]
    OR?: teachersScalarWhereWithAggregatesInput[]
    NOT?: teachersScalarWhereWithAggregatesInput | teachersScalarWhereWithAggregatesInput[]
    id_teacher?: IntWithAggregatesFilter<"teachers"> | number
    last_name?: StringWithAggregatesFilter<"teachers"> | string
    first_name?: StringWithAggregatesFilter<"teachers"> | string
    email?: StringWithAggregatesFilter<"teachers"> | string
    password?: StringWithAggregatesFilter<"teachers"> | string
    created_at?: DateTimeWithAggregatesFilter<"teachers"> | Date | string
  }

  export type adminsWhereInput = {
    AND?: adminsWhereInput | adminsWhereInput[]
    OR?: adminsWhereInput[]
    NOT?: adminsWhereInput | adminsWhereInput[]
    id_admin?: IntFilter<"admins"> | number
    first_name?: StringFilter<"admins"> | string
    last_name?: StringFilter<"admins"> | string
    email?: StringFilter<"admins"> | string
    password?: StringFilter<"admins"> | string
    created_at?: DateTimeFilter<"admins"> | Date | string
  }

  export type adminsOrderByWithRelationInput = {
    id_admin?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _relevance?: adminsOrderByRelevanceInput
  }

  export type adminsWhereUniqueInput = Prisma.AtLeast<{
    id_admin?: number
    email?: string
    AND?: adminsWhereInput | adminsWhereInput[]
    OR?: adminsWhereInput[]
    NOT?: adminsWhereInput | adminsWhereInput[]
    first_name?: StringFilter<"admins"> | string
    last_name?: StringFilter<"admins"> | string
    password?: StringFilter<"admins"> | string
    created_at?: DateTimeFilter<"admins"> | Date | string
  }, "id_admin" | "email">

  export type adminsOrderByWithAggregationInput = {
    id_admin?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: adminsCountOrderByAggregateInput
    _avg?: adminsAvgOrderByAggregateInput
    _max?: adminsMaxOrderByAggregateInput
    _min?: adminsMinOrderByAggregateInput
    _sum?: adminsSumOrderByAggregateInput
  }

  export type adminsScalarWhereWithAggregatesInput = {
    AND?: adminsScalarWhereWithAggregatesInput | adminsScalarWhereWithAggregatesInput[]
    OR?: adminsScalarWhereWithAggregatesInput[]
    NOT?: adminsScalarWhereWithAggregatesInput | adminsScalarWhereWithAggregatesInput[]
    id_admin?: IntWithAggregatesFilter<"admins"> | number
    first_name?: StringWithAggregatesFilter<"admins"> | string
    last_name?: StringWithAggregatesFilter<"admins"> | string
    email?: StringWithAggregatesFilter<"admins"> | string
    password?: StringWithAggregatesFilter<"admins"> | string
    created_at?: DateTimeWithAggregatesFilter<"admins"> | Date | string
  }

  export type published_quizzesWhereInput = {
    AND?: published_quizzesWhereInput | published_quizzesWhereInput[]
    OR?: published_quizzesWhereInput[]
    NOT?: published_quizzesWhereInput | published_quizzesWhereInput[]
    id_published?: IntFilter<"published_quizzes"> | number
    id_quiz?: IntFilter<"published_quizzes"> | number
    student_number?: IntFilter<"published_quizzes"> | number
    published_at?: DateTimeFilter<"published_quizzes"> | Date | string
    quizzes?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
  }

  export type published_quizzesOrderByWithRelationInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
    published_at?: SortOrder
    quizzes?: quizzesOrderByWithRelationInput
  }

  export type published_quizzesWhereUniqueInput = Prisma.AtLeast<{
    id_published?: number
    AND?: published_quizzesWhereInput | published_quizzesWhereInput[]
    OR?: published_quizzesWhereInput[]
    NOT?: published_quizzesWhereInput | published_quizzesWhereInput[]
    id_quiz?: IntFilter<"published_quizzes"> | number
    student_number?: IntFilter<"published_quizzes"> | number
    published_at?: DateTimeFilter<"published_quizzes"> | Date | string
    quizzes?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
  }, "id_published">

  export type published_quizzesOrderByWithAggregationInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
    published_at?: SortOrder
    _count?: published_quizzesCountOrderByAggregateInput
    _avg?: published_quizzesAvgOrderByAggregateInput
    _max?: published_quizzesMaxOrderByAggregateInput
    _min?: published_quizzesMinOrderByAggregateInput
    _sum?: published_quizzesSumOrderByAggregateInput
  }

  export type published_quizzesScalarWhereWithAggregatesInput = {
    AND?: published_quizzesScalarWhereWithAggregatesInput | published_quizzesScalarWhereWithAggregatesInput[]
    OR?: published_quizzesScalarWhereWithAggregatesInput[]
    NOT?: published_quizzesScalarWhereWithAggregatesInput | published_quizzesScalarWhereWithAggregatesInput[]
    id_published?: IntWithAggregatesFilter<"published_quizzes"> | number
    id_quiz?: IntWithAggregatesFilter<"published_quizzes"> | number
    student_number?: IntWithAggregatesFilter<"published_quizzes"> | number
    published_at?: DateTimeWithAggregatesFilter<"published_quizzes"> | Date | string
  }

  export type answersCreateInput = {
    answer_text: string
    correct: number
    questions: questionsCreateNestedOneWithoutAnswersInput
  }

  export type answersUncheckedCreateInput = {
    id_answer?: number
    id_question: number
    answer_text: string
    correct: number
  }

  export type answersUpdateInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
    questions?: questionsUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type answersUncheckedUpdateInput = {
    id_answer?: IntFieldUpdateOperationsInput | number
    id_question?: IntFieldUpdateOperationsInput | number
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type answersCreateManyInput = {
    id_answer?: number
    id_question: number
    answer_text: string
    correct: number
  }

  export type answersUpdateManyMutationInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type answersUncheckedUpdateManyInput = {
    id_answer?: IntFieldUpdateOperationsInput | number
    id_question?: IntFieldUpdateOperationsInput | number
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type attemptsCreateInput = {
    corrected: number
    score?: number
    attempt_at?: Date | string
    students: studentsCreateNestedOneWithoutAttemptsInput
    quizzes: quizzesCreateNestedOneWithoutAttemptsInput
    student_answers?: student_answersCreateNestedManyWithoutAttemptsInput
  }

  export type attemptsUncheckedCreateInput = {
    id_attempt?: number
    id_student: number
    id_quiz: number
    corrected: number
    score?: number
    attempt_at?: Date | string
    student_answers?: student_answersUncheckedCreateNestedManyWithoutAttemptsInput
  }

  export type attemptsUpdateInput = {
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: studentsUpdateOneRequiredWithoutAttemptsNestedInput
    quizzes?: quizzesUpdateOneRequiredWithoutAttemptsNestedInput
    student_answers?: student_answersUpdateManyWithoutAttemptsNestedInput
  }

  export type attemptsUncheckedUpdateInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_student?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    student_answers?: student_answersUncheckedUpdateManyWithoutAttemptsNestedInput
  }

  export type attemptsCreateManyInput = {
    id_attempt?: number
    id_student: number
    id_quiz: number
    corrected: number
    score?: number
    attempt_at?: Date | string
  }

  export type attemptsUpdateManyMutationInput = {
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attemptsUncheckedUpdateManyInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_student?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsCreateInput = {
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    answers?: answersCreateNestedManyWithoutQuestionsInput
    quizzes: quizzesCreateNestedOneWithoutQuestionsInput
    student_answers?: student_answersCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateInput = {
    id_question?: number
    id_quiz: number
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    answers?: answersUncheckedCreateNestedManyWithoutQuestionsInput
    student_answers?: student_answersUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUpdateInput = {
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    answers?: answersUpdateManyWithoutQuestionsNestedInput
    quizzes?: quizzesUpdateOneRequiredWithoutQuestionsNestedInput
    student_answers?: student_answersUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    answers?: answersUncheckedUpdateManyWithoutQuestionsNestedInput
    student_answers?: student_answersUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsCreateManyInput = {
    id_question?: number
    id_quiz: number
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
  }

  export type questionsUpdateManyMutationInput = {
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
  }

  export type questionsUncheckedUpdateManyInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesCreateInput = {
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsCreateNestedManyWithoutQuizzesInput
    published_quizzes?: published_quizzesCreateNestedManyWithoutQuizzesInput
    questions?: questionsCreateNestedManyWithoutQuizzesInput
    teachers: teachersCreateNestedOneWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    id_teacher: number
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsUncheckedCreateNestedManyWithoutQuizzesInput
    published_quizzes?: published_quizzesUncheckedCreateNestedManyWithoutQuizzesInput
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUpdateManyWithoutQuizzesNestedInput
    published_quizzes?: published_quizzesUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
    teachers?: teachersUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    id_teacher?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUncheckedUpdateManyWithoutQuizzesNestedInput
    published_quizzes?: published_quizzesUncheckedUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesCreateManyInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    id_teacher: number
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
  }

  export type quizzesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesUncheckedUpdateManyInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    id_teacher?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
  }

  export type student_answersCreateInput = {
    student_answer_text?: string | null
    correct: number
    attempts: attemptsCreateNestedOneWithoutStudent_answersInput
    questions: questionsCreateNestedOneWithoutStudent_answersInput
  }

  export type student_answersUncheckedCreateInput = {
    id_student_answer?: number
    id_attempt: number
    id_question: number
    student_answer_text?: string | null
    correct: number
  }

  export type student_answersUpdateInput = {
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUpdateOneRequiredWithoutStudent_answersNestedInput
    questions?: questionsUpdateOneRequiredWithoutStudent_answersNestedInput
  }

  export type student_answersUncheckedUpdateInput = {
    id_student_answer?: IntFieldUpdateOperationsInput | number
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_question?: IntFieldUpdateOperationsInput | number
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type student_answersCreateManyInput = {
    id_student_answer?: number
    id_attempt: number
    id_question: number
    student_answer_text?: string | null
    correct: number
  }

  export type student_answersUpdateManyMutationInput = {
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type student_answersUncheckedUpdateManyInput = {
    id_student_answer?: IntFieldUpdateOperationsInput | number
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_question?: IntFieldUpdateOperationsInput | number
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type studentsCreateInput = {
    first_name: string
    last_name: string
    annee: number
    groupe_student: number
    email: string
    password: string
    created_at?: Date | string
    attempts?: attemptsCreateNestedManyWithoutStudentsInput
  }

  export type studentsUncheckedCreateInput = {
    id_student?: number
    first_name: string
    last_name: string
    annee: number
    groupe_student: number
    email: string
    password: string
    created_at?: Date | string
    attempts?: attemptsUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type studentsUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    annee?: IntFieldUpdateOperationsInput | number
    groupe_student?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: attemptsUpdateManyWithoutStudentsNestedInput
  }

  export type studentsUncheckedUpdateInput = {
    id_student?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    annee?: IntFieldUpdateOperationsInput | number
    groupe_student?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: attemptsUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type studentsCreateManyInput = {
    id_student?: number
    first_name: string
    last_name: string
    annee: number
    groupe_student: number
    email: string
    password: string
    created_at?: Date | string
  }

  export type studentsUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    annee?: IntFieldUpdateOperationsInput | number
    groupe_student?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentsUncheckedUpdateManyInput = {
    id_student?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    annee?: IntFieldUpdateOperationsInput | number
    groupe_student?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type teachersCreateInput = {
    last_name: string
    first_name: string
    email: string
    password: string
    created_at?: Date | string
    quizzes?: quizzesCreateNestedManyWithoutTeachersInput
  }

  export type teachersUncheckedCreateInput = {
    id_teacher?: number
    last_name: string
    first_name: string
    email: string
    password: string
    created_at?: Date | string
    quizzes?: quizzesUncheckedCreateNestedManyWithoutTeachersInput
  }

  export type teachersUpdateInput = {
    last_name?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUpdateManyWithoutTeachersNestedInput
  }

  export type teachersUncheckedUpdateInput = {
    id_teacher?: IntFieldUpdateOperationsInput | number
    last_name?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUncheckedUpdateManyWithoutTeachersNestedInput
  }

  export type teachersCreateManyInput = {
    id_teacher?: number
    last_name: string
    first_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type teachersUpdateManyMutationInput = {
    last_name?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type teachersUncheckedUpdateManyInput = {
    id_teacher?: IntFieldUpdateOperationsInput | number
    last_name?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adminsCreateInput = {
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type adminsUncheckedCreateInput = {
    id_admin?: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type adminsUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adminsUncheckedUpdateInput = {
    id_admin?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adminsCreateManyInput = {
    id_admin?: number
    first_name: string
    last_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type adminsUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type adminsUncheckedUpdateManyInput = {
    id_admin?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type published_quizzesCreateInput = {
    student_number: number
    published_at?: Date | string
    quizzes: quizzesCreateNestedOneWithoutPublished_quizzesInput
  }

  export type published_quizzesUncheckedCreateInput = {
    id_published?: number
    id_quiz: number
    student_number: number
    published_at?: Date | string
  }

  export type published_quizzesUpdateInput = {
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUpdateOneRequiredWithoutPublished_quizzesNestedInput
  }

  export type published_quizzesUncheckedUpdateInput = {
    id_published?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type published_quizzesCreateManyInput = {
    id_published?: number
    id_quiz: number
    student_number: number
    published_at?: Date | string
  }

  export type published_quizzesUpdateManyMutationInput = {
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type published_quizzesUncheckedUpdateManyInput = {
    id_published?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type QuestionsScalarRelationFilter = {
    is?: questionsWhereInput
    isNot?: questionsWhereInput
  }

  export type answersOrderByRelevanceInput = {
    fields: answersOrderByRelevanceFieldEnum | answersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type answersCountOrderByAggregateInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    answer_text?: SortOrder
    correct?: SortOrder
  }

  export type answersAvgOrderByAggregateInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    correct?: SortOrder
  }

  export type answersMaxOrderByAggregateInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    answer_text?: SortOrder
    correct?: SortOrder
  }

  export type answersMinOrderByAggregateInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    answer_text?: SortOrder
    correct?: SortOrder
  }

  export type answersSumOrderByAggregateInput = {
    id_answer?: SortOrder
    id_question?: SortOrder
    correct?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StudentsScalarRelationFilter = {
    is?: studentsWhereInput
    isNot?: studentsWhereInput
  }

  export type QuizzesScalarRelationFilter = {
    is?: quizzesWhereInput
    isNot?: quizzesWhereInput
  }

  export type Student_answersListRelationFilter = {
    every?: student_answersWhereInput
    some?: student_answersWhereInput
    none?: student_answersWhereInput
  }

  export type student_answersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type attemptsCountOrderByAggregateInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
    attempt_at?: SortOrder
  }

  export type attemptsAvgOrderByAggregateInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
  }

  export type attemptsMaxOrderByAggregateInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
    attempt_at?: SortOrder
  }

  export type attemptsMinOrderByAggregateInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
    attempt_at?: SortOrder
  }

  export type attemptsSumOrderByAggregateInput = {
    id_attempt?: SortOrder
    id_student?: SortOrder
    id_quiz?: SortOrder
    corrected?: SortOrder
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AnswersListRelationFilter = {
    every?: answersWhereInput
    some?: answersWhereInput
    none?: answersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type answersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionsOrderByRelevanceInput = {
    fields: questionsOrderByRelevanceFieldEnum | questionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type questionsCountOrderByAggregateInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrder
    question_text?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_type?: SortOrder
    created_at?: SortOrder
    question_percentage?: SortOrder
  }

  export type questionsAvgOrderByAggregateInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_percentage?: SortOrder
  }

  export type questionsMaxOrderByAggregateInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrder
    question_text?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_type?: SortOrder
    created_at?: SortOrder
    question_percentage?: SortOrder
  }

  export type questionsMinOrderByAggregateInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrder
    question_text?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_type?: SortOrder
    created_at?: SortOrder
    question_percentage?: SortOrder
  }

  export type questionsSumOrderByAggregateInput = {
    id_question?: SortOrder
    id_quiz?: SortOrder
    duration?: SortOrder
    question_number?: SortOrder
    points?: SortOrder
    question_percentage?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AttemptsListRelationFilter = {
    every?: attemptsWhereInput
    some?: attemptsWhereInput
    none?: attemptsWhereInput
  }

  export type Published_quizzesListRelationFilter = {
    every?: published_quizzesWhereInput
    some?: published_quizzesWhereInput
    none?: published_quizzesWhereInput
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type TeachersScalarRelationFilter = {
    is?: teachersWhereInput
    isNot?: teachersWhereInput
  }

  export type attemptsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type published_quizzesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type quizzesOrderByRelevanceInput = {
    fields: quizzesOrderByRelevanceFieldEnum | quizzesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type quizzesCountOrderByAggregateInput = {
    id_quiz?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    correctionType?: SortOrder
    id_teacher?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    score?: SortOrder
    for_year?: SortOrder
    for_groupe?: SortOrder
    created_at?: SortOrder
    nb_attempts?: SortOrder
  }

  export type quizzesAvgOrderByAggregateInput = {
    id_quiz?: SortOrder
    duration?: SortOrder
    id_teacher?: SortOrder
    score?: SortOrder
    for_year?: SortOrder
    for_groupe?: SortOrder
    nb_attempts?: SortOrder
  }

  export type quizzesMaxOrderByAggregateInput = {
    id_quiz?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    correctionType?: SortOrder
    id_teacher?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    score?: SortOrder
    for_year?: SortOrder
    for_groupe?: SortOrder
    created_at?: SortOrder
    nb_attempts?: SortOrder
  }

  export type quizzesMinOrderByAggregateInput = {
    id_quiz?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    correctionType?: SortOrder
    id_teacher?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    score?: SortOrder
    for_year?: SortOrder
    for_groupe?: SortOrder
    created_at?: SortOrder
    nb_attempts?: SortOrder
  }

  export type quizzesSumOrderByAggregateInput = {
    id_quiz?: SortOrder
    duration?: SortOrder
    id_teacher?: SortOrder
    score?: SortOrder
    for_year?: SortOrder
    for_groupe?: SortOrder
    nb_attempts?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AttemptsScalarRelationFilter = {
    is?: attemptsWhereInput
    isNot?: attemptsWhereInput
  }

  export type student_answersOrderByRelevanceInput = {
    fields: student_answersOrderByRelevanceFieldEnum | student_answersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type student_answersCountOrderByAggregateInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    student_answer_text?: SortOrder
    correct?: SortOrder
  }

  export type student_answersAvgOrderByAggregateInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    correct?: SortOrder
  }

  export type student_answersMaxOrderByAggregateInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    student_answer_text?: SortOrder
    correct?: SortOrder
  }

  export type student_answersMinOrderByAggregateInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    student_answer_text?: SortOrder
    correct?: SortOrder
  }

  export type student_answersSumOrderByAggregateInput = {
    id_student_answer?: SortOrder
    id_attempt?: SortOrder
    id_question?: SortOrder
    correct?: SortOrder
  }

  export type studentsOrderByRelevanceInput = {
    fields: studentsOrderByRelevanceFieldEnum | studentsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type studentsCountOrderByAggregateInput = {
    id_student?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type studentsAvgOrderByAggregateInput = {
    id_student?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
  }

  export type studentsMaxOrderByAggregateInput = {
    id_student?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type studentsMinOrderByAggregateInput = {
    id_student?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type studentsSumOrderByAggregateInput = {
    id_student?: SortOrder
    annee?: SortOrder
    groupe_student?: SortOrder
  }

  export type QuizzesListRelationFilter = {
    every?: quizzesWhereInput
    some?: quizzesWhereInput
    none?: quizzesWhereInput
  }

  export type quizzesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teachersOrderByRelevanceInput = {
    fields: teachersOrderByRelevanceFieldEnum | teachersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type teachersCountOrderByAggregateInput = {
    id_teacher?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type teachersAvgOrderByAggregateInput = {
    id_teacher?: SortOrder
  }

  export type teachersMaxOrderByAggregateInput = {
    id_teacher?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type teachersMinOrderByAggregateInput = {
    id_teacher?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type teachersSumOrderByAggregateInput = {
    id_teacher?: SortOrder
  }

  export type adminsOrderByRelevanceInput = {
    fields: adminsOrderByRelevanceFieldEnum | adminsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type adminsCountOrderByAggregateInput = {
    id_admin?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type adminsAvgOrderByAggregateInput = {
    id_admin?: SortOrder
  }

  export type adminsMaxOrderByAggregateInput = {
    id_admin?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type adminsMinOrderByAggregateInput = {
    id_admin?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type adminsSumOrderByAggregateInput = {
    id_admin?: SortOrder
  }

  export type published_quizzesCountOrderByAggregateInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
    published_at?: SortOrder
  }

  export type published_quizzesAvgOrderByAggregateInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
  }

  export type published_quizzesMaxOrderByAggregateInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
    published_at?: SortOrder
  }

  export type published_quizzesMinOrderByAggregateInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
    published_at?: SortOrder
  }

  export type published_quizzesSumOrderByAggregateInput = {
    id_published?: SortOrder
    id_quiz?: SortOrder
    student_number?: SortOrder
  }

  export type questionsCreateNestedOneWithoutAnswersInput = {
    create?: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: questionsCreateOrConnectWithoutAnswersInput
    connect?: questionsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type questionsUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: questionsCreateOrConnectWithoutAnswersInput
    upsert?: questionsUpsertWithoutAnswersInput
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutAnswersInput, questionsUpdateWithoutAnswersInput>, questionsUncheckedUpdateWithoutAnswersInput>
  }

  export type studentsCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<studentsCreateWithoutAttemptsInput, studentsUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutAttemptsInput
    connect?: studentsWhereUniqueInput
  }

  export type quizzesCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<quizzesCreateWithoutAttemptsInput, quizzesUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutAttemptsInput
    connect?: quizzesWhereUniqueInput
  }

  export type student_answersCreateNestedManyWithoutAttemptsInput = {
    create?: XOR<student_answersCreateWithoutAttemptsInput, student_answersUncheckedCreateWithoutAttemptsInput> | student_answersCreateWithoutAttemptsInput[] | student_answersUncheckedCreateWithoutAttemptsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutAttemptsInput | student_answersCreateOrConnectWithoutAttemptsInput[]
    createMany?: student_answersCreateManyAttemptsInputEnvelope
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
  }

  export type student_answersUncheckedCreateNestedManyWithoutAttemptsInput = {
    create?: XOR<student_answersCreateWithoutAttemptsInput, student_answersUncheckedCreateWithoutAttemptsInput> | student_answersCreateWithoutAttemptsInput[] | student_answersUncheckedCreateWithoutAttemptsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutAttemptsInput | student_answersCreateOrConnectWithoutAttemptsInput[]
    createMany?: student_answersCreateManyAttemptsInputEnvelope
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type studentsUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<studentsCreateWithoutAttemptsInput, studentsUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutAttemptsInput
    upsert?: studentsUpsertWithoutAttemptsInput
    connect?: studentsWhereUniqueInput
    update?: XOR<XOR<studentsUpdateToOneWithWhereWithoutAttemptsInput, studentsUpdateWithoutAttemptsInput>, studentsUncheckedUpdateWithoutAttemptsInput>
  }

  export type quizzesUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<quizzesCreateWithoutAttemptsInput, quizzesUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutAttemptsInput
    upsert?: quizzesUpsertWithoutAttemptsInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutAttemptsInput, quizzesUpdateWithoutAttemptsInput>, quizzesUncheckedUpdateWithoutAttemptsInput>
  }

  export type student_answersUpdateManyWithoutAttemptsNestedInput = {
    create?: XOR<student_answersCreateWithoutAttemptsInput, student_answersUncheckedCreateWithoutAttemptsInput> | student_answersCreateWithoutAttemptsInput[] | student_answersUncheckedCreateWithoutAttemptsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutAttemptsInput | student_answersCreateOrConnectWithoutAttemptsInput[]
    upsert?: student_answersUpsertWithWhereUniqueWithoutAttemptsInput | student_answersUpsertWithWhereUniqueWithoutAttemptsInput[]
    createMany?: student_answersCreateManyAttemptsInputEnvelope
    set?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    disconnect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    delete?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    update?: student_answersUpdateWithWhereUniqueWithoutAttemptsInput | student_answersUpdateWithWhereUniqueWithoutAttemptsInput[]
    updateMany?: student_answersUpdateManyWithWhereWithoutAttemptsInput | student_answersUpdateManyWithWhereWithoutAttemptsInput[]
    deleteMany?: student_answersScalarWhereInput | student_answersScalarWhereInput[]
  }

  export type student_answersUncheckedUpdateManyWithoutAttemptsNestedInput = {
    create?: XOR<student_answersCreateWithoutAttemptsInput, student_answersUncheckedCreateWithoutAttemptsInput> | student_answersCreateWithoutAttemptsInput[] | student_answersUncheckedCreateWithoutAttemptsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutAttemptsInput | student_answersCreateOrConnectWithoutAttemptsInput[]
    upsert?: student_answersUpsertWithWhereUniqueWithoutAttemptsInput | student_answersUpsertWithWhereUniqueWithoutAttemptsInput[]
    createMany?: student_answersCreateManyAttemptsInputEnvelope
    set?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    disconnect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    delete?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    update?: student_answersUpdateWithWhereUniqueWithoutAttemptsInput | student_answersUpdateWithWhereUniqueWithoutAttemptsInput[]
    updateMany?: student_answersUpdateManyWithWhereWithoutAttemptsInput | student_answersUpdateManyWithWhereWithoutAttemptsInput[]
    deleteMany?: student_answersScalarWhereInput | student_answersScalarWhereInput[]
  }

  export type answersCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
  }

  export type quizzesCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestionsInput
    connect?: quizzesWhereUniqueInput
  }

  export type student_answersCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<student_answersCreateWithoutQuestionsInput, student_answersUncheckedCreateWithoutQuestionsInput> | student_answersCreateWithoutQuestionsInput[] | student_answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutQuestionsInput | student_answersCreateOrConnectWithoutQuestionsInput[]
    createMany?: student_answersCreateManyQuestionsInputEnvelope
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
  }

  export type answersUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
  }

  export type student_answersUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<student_answersCreateWithoutQuestionsInput, student_answersUncheckedCreateWithoutQuestionsInput> | student_answersCreateWithoutQuestionsInput[] | student_answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutQuestionsInput | student_answersCreateOrConnectWithoutQuestionsInput[]
    createMany?: student_answersCreateManyQuestionsInputEnvelope
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type answersUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    upsert?: answersUpsertWithWhereUniqueWithoutQuestionsInput | answersUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    set?: answersWhereUniqueInput | answersWhereUniqueInput[]
    disconnect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    delete?: answersWhereUniqueInput | answersWhereUniqueInput[]
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    update?: answersUpdateWithWhereUniqueWithoutQuestionsInput | answersUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: answersUpdateManyWithWhereWithoutQuestionsInput | answersUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: answersScalarWhereInput | answersScalarWhereInput[]
  }

  export type quizzesUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestionsInput
    upsert?: quizzesUpsertWithoutQuestionsInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutQuestionsInput, quizzesUpdateWithoutQuestionsInput>, quizzesUncheckedUpdateWithoutQuestionsInput>
  }

  export type student_answersUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<student_answersCreateWithoutQuestionsInput, student_answersUncheckedCreateWithoutQuestionsInput> | student_answersCreateWithoutQuestionsInput[] | student_answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutQuestionsInput | student_answersCreateOrConnectWithoutQuestionsInput[]
    upsert?: student_answersUpsertWithWhereUniqueWithoutQuestionsInput | student_answersUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: student_answersCreateManyQuestionsInputEnvelope
    set?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    disconnect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    delete?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    update?: student_answersUpdateWithWhereUniqueWithoutQuestionsInput | student_answersUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: student_answersUpdateManyWithWhereWithoutQuestionsInput | student_answersUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: student_answersScalarWhereInput | student_answersScalarWhereInput[]
  }

  export type answersUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput> | answersCreateWithoutQuestionsInput[] | answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: answersCreateOrConnectWithoutQuestionsInput | answersCreateOrConnectWithoutQuestionsInput[]
    upsert?: answersUpsertWithWhereUniqueWithoutQuestionsInput | answersUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: answersCreateManyQuestionsInputEnvelope
    set?: answersWhereUniqueInput | answersWhereUniqueInput[]
    disconnect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    delete?: answersWhereUniqueInput | answersWhereUniqueInput[]
    connect?: answersWhereUniqueInput | answersWhereUniqueInput[]
    update?: answersUpdateWithWhereUniqueWithoutQuestionsInput | answersUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: answersUpdateManyWithWhereWithoutQuestionsInput | answersUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: answersScalarWhereInput | answersScalarWhereInput[]
  }

  export type student_answersUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<student_answersCreateWithoutQuestionsInput, student_answersUncheckedCreateWithoutQuestionsInput> | student_answersCreateWithoutQuestionsInput[] | student_answersUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: student_answersCreateOrConnectWithoutQuestionsInput | student_answersCreateOrConnectWithoutQuestionsInput[]
    upsert?: student_answersUpsertWithWhereUniqueWithoutQuestionsInput | student_answersUpsertWithWhereUniqueWithoutQuestionsInput[]
    createMany?: student_answersCreateManyQuestionsInputEnvelope
    set?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    disconnect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    delete?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    connect?: student_answersWhereUniqueInput | student_answersWhereUniqueInput[]
    update?: student_answersUpdateWithWhereUniqueWithoutQuestionsInput | student_answersUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: student_answersUpdateManyWithWhereWithoutQuestionsInput | student_answersUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: student_answersScalarWhereInput | student_answersScalarWhereInput[]
  }

  export type attemptsCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<attemptsCreateWithoutQuizzesInput, attemptsUncheckedCreateWithoutQuizzesInput> | attemptsCreateWithoutQuizzesInput[] | attemptsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutQuizzesInput | attemptsCreateOrConnectWithoutQuizzesInput[]
    createMany?: attemptsCreateManyQuizzesInputEnvelope
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
  }

  export type published_quizzesCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<published_quizzesCreateWithoutQuizzesInput, published_quizzesUncheckedCreateWithoutQuizzesInput> | published_quizzesCreateWithoutQuizzesInput[] | published_quizzesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: published_quizzesCreateOrConnectWithoutQuizzesInput | published_quizzesCreateOrConnectWithoutQuizzesInput[]
    createMany?: published_quizzesCreateManyQuizzesInputEnvelope
    connect?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
  }

  export type questionsCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type teachersCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<teachersCreateWithoutQuizzesInput, teachersUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: teachersCreateOrConnectWithoutQuizzesInput
    connect?: teachersWhereUniqueInput
  }

  export type attemptsUncheckedCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<attemptsCreateWithoutQuizzesInput, attemptsUncheckedCreateWithoutQuizzesInput> | attemptsCreateWithoutQuizzesInput[] | attemptsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutQuizzesInput | attemptsCreateOrConnectWithoutQuizzesInput[]
    createMany?: attemptsCreateManyQuizzesInputEnvelope
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
  }

  export type published_quizzesUncheckedCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<published_quizzesCreateWithoutQuizzesInput, published_quizzesUncheckedCreateWithoutQuizzesInput> | published_quizzesCreateWithoutQuizzesInput[] | published_quizzesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: published_quizzesCreateOrConnectWithoutQuizzesInput | published_quizzesCreateOrConnectWithoutQuizzesInput[]
    createMany?: published_quizzesCreateManyQuizzesInputEnvelope
    connect?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
  }

  export type questionsUncheckedCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type attemptsUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<attemptsCreateWithoutQuizzesInput, attemptsUncheckedCreateWithoutQuizzesInput> | attemptsCreateWithoutQuizzesInput[] | attemptsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutQuizzesInput | attemptsCreateOrConnectWithoutQuizzesInput[]
    upsert?: attemptsUpsertWithWhereUniqueWithoutQuizzesInput | attemptsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: attemptsCreateManyQuizzesInputEnvelope
    set?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    disconnect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    delete?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    update?: attemptsUpdateWithWhereUniqueWithoutQuizzesInput | attemptsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: attemptsUpdateManyWithWhereWithoutQuizzesInput | attemptsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: attemptsScalarWhereInput | attemptsScalarWhereInput[]
  }

  export type published_quizzesUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<published_quizzesCreateWithoutQuizzesInput, published_quizzesUncheckedCreateWithoutQuizzesInput> | published_quizzesCreateWithoutQuizzesInput[] | published_quizzesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: published_quizzesCreateOrConnectWithoutQuizzesInput | published_quizzesCreateOrConnectWithoutQuizzesInput[]
    upsert?: published_quizzesUpsertWithWhereUniqueWithoutQuizzesInput | published_quizzesUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: published_quizzesCreateManyQuizzesInputEnvelope
    set?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    disconnect?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    delete?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    connect?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    update?: published_quizzesUpdateWithWhereUniqueWithoutQuizzesInput | published_quizzesUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: published_quizzesUpdateManyWithWhereWithoutQuizzesInput | published_quizzesUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: published_quizzesScalarWhereInput | published_quizzesScalarWhereInput[]
  }

  export type questionsUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutQuizzesInput | questionsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutQuizzesInput | questionsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutQuizzesInput | questionsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type teachersUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<teachersCreateWithoutQuizzesInput, teachersUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: teachersCreateOrConnectWithoutQuizzesInput
    upsert?: teachersUpsertWithoutQuizzesInput
    connect?: teachersWhereUniqueInput
    update?: XOR<XOR<teachersUpdateToOneWithWhereWithoutQuizzesInput, teachersUpdateWithoutQuizzesInput>, teachersUncheckedUpdateWithoutQuizzesInput>
  }

  export type attemptsUncheckedUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<attemptsCreateWithoutQuizzesInput, attemptsUncheckedCreateWithoutQuizzesInput> | attemptsCreateWithoutQuizzesInput[] | attemptsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutQuizzesInput | attemptsCreateOrConnectWithoutQuizzesInput[]
    upsert?: attemptsUpsertWithWhereUniqueWithoutQuizzesInput | attemptsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: attemptsCreateManyQuizzesInputEnvelope
    set?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    disconnect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    delete?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    update?: attemptsUpdateWithWhereUniqueWithoutQuizzesInput | attemptsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: attemptsUpdateManyWithWhereWithoutQuizzesInput | attemptsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: attemptsScalarWhereInput | attemptsScalarWhereInput[]
  }

  export type published_quizzesUncheckedUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<published_quizzesCreateWithoutQuizzesInput, published_quizzesUncheckedCreateWithoutQuizzesInput> | published_quizzesCreateWithoutQuizzesInput[] | published_quizzesUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: published_quizzesCreateOrConnectWithoutQuizzesInput | published_quizzesCreateOrConnectWithoutQuizzesInput[]
    upsert?: published_quizzesUpsertWithWhereUniqueWithoutQuizzesInput | published_quizzesUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: published_quizzesCreateManyQuizzesInputEnvelope
    set?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    disconnect?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    delete?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    connect?: published_quizzesWhereUniqueInput | published_quizzesWhereUniqueInput[]
    update?: published_quizzesUpdateWithWhereUniqueWithoutQuizzesInput | published_quizzesUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: published_quizzesUpdateManyWithWhereWithoutQuizzesInput | published_quizzesUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: published_quizzesScalarWhereInput | published_quizzesScalarWhereInput[]
  }

  export type questionsUncheckedUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput> | questionsCreateWithoutQuizzesInput[] | questionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuizzesInput | questionsCreateOrConnectWithoutQuizzesInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutQuizzesInput | questionsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: questionsCreateManyQuizzesInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutQuizzesInput | questionsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutQuizzesInput | questionsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type attemptsCreateNestedOneWithoutStudent_answersInput = {
    create?: XOR<attemptsCreateWithoutStudent_answersInput, attemptsUncheckedCreateWithoutStudent_answersInput>
    connectOrCreate?: attemptsCreateOrConnectWithoutStudent_answersInput
    connect?: attemptsWhereUniqueInput
  }

  export type questionsCreateNestedOneWithoutStudent_answersInput = {
    create?: XOR<questionsCreateWithoutStudent_answersInput, questionsUncheckedCreateWithoutStudent_answersInput>
    connectOrCreate?: questionsCreateOrConnectWithoutStudent_answersInput
    connect?: questionsWhereUniqueInput
  }

  export type attemptsUpdateOneRequiredWithoutStudent_answersNestedInput = {
    create?: XOR<attemptsCreateWithoutStudent_answersInput, attemptsUncheckedCreateWithoutStudent_answersInput>
    connectOrCreate?: attemptsCreateOrConnectWithoutStudent_answersInput
    upsert?: attemptsUpsertWithoutStudent_answersInput
    connect?: attemptsWhereUniqueInput
    update?: XOR<XOR<attemptsUpdateToOneWithWhereWithoutStudent_answersInput, attemptsUpdateWithoutStudent_answersInput>, attemptsUncheckedUpdateWithoutStudent_answersInput>
  }

  export type questionsUpdateOneRequiredWithoutStudent_answersNestedInput = {
    create?: XOR<questionsCreateWithoutStudent_answersInput, questionsUncheckedCreateWithoutStudent_answersInput>
    connectOrCreate?: questionsCreateOrConnectWithoutStudent_answersInput
    upsert?: questionsUpsertWithoutStudent_answersInput
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutStudent_answersInput, questionsUpdateWithoutStudent_answersInput>, questionsUncheckedUpdateWithoutStudent_answersInput>
  }

  export type attemptsCreateNestedManyWithoutStudentsInput = {
    create?: XOR<attemptsCreateWithoutStudentsInput, attemptsUncheckedCreateWithoutStudentsInput> | attemptsCreateWithoutStudentsInput[] | attemptsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutStudentsInput | attemptsCreateOrConnectWithoutStudentsInput[]
    createMany?: attemptsCreateManyStudentsInputEnvelope
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
  }

  export type attemptsUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<attemptsCreateWithoutStudentsInput, attemptsUncheckedCreateWithoutStudentsInput> | attemptsCreateWithoutStudentsInput[] | attemptsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutStudentsInput | attemptsCreateOrConnectWithoutStudentsInput[]
    createMany?: attemptsCreateManyStudentsInputEnvelope
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
  }

  export type attemptsUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<attemptsCreateWithoutStudentsInput, attemptsUncheckedCreateWithoutStudentsInput> | attemptsCreateWithoutStudentsInput[] | attemptsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutStudentsInput | attemptsCreateOrConnectWithoutStudentsInput[]
    upsert?: attemptsUpsertWithWhereUniqueWithoutStudentsInput | attemptsUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: attemptsCreateManyStudentsInputEnvelope
    set?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    disconnect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    delete?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    update?: attemptsUpdateWithWhereUniqueWithoutStudentsInput | attemptsUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: attemptsUpdateManyWithWhereWithoutStudentsInput | attemptsUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: attemptsScalarWhereInput | attemptsScalarWhereInput[]
  }

  export type attemptsUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<attemptsCreateWithoutStudentsInput, attemptsUncheckedCreateWithoutStudentsInput> | attemptsCreateWithoutStudentsInput[] | attemptsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: attemptsCreateOrConnectWithoutStudentsInput | attemptsCreateOrConnectWithoutStudentsInput[]
    upsert?: attemptsUpsertWithWhereUniqueWithoutStudentsInput | attemptsUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: attemptsCreateManyStudentsInputEnvelope
    set?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    disconnect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    delete?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    connect?: attemptsWhereUniqueInput | attemptsWhereUniqueInput[]
    update?: attemptsUpdateWithWhereUniqueWithoutStudentsInput | attemptsUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: attemptsUpdateManyWithWhereWithoutStudentsInput | attemptsUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: attemptsScalarWhereInput | attemptsScalarWhereInput[]
  }

  export type quizzesCreateNestedManyWithoutTeachersInput = {
    create?: XOR<quizzesCreateWithoutTeachersInput, quizzesUncheckedCreateWithoutTeachersInput> | quizzesCreateWithoutTeachersInput[] | quizzesUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutTeachersInput | quizzesCreateOrConnectWithoutTeachersInput[]
    createMany?: quizzesCreateManyTeachersInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type quizzesUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<quizzesCreateWithoutTeachersInput, quizzesUncheckedCreateWithoutTeachersInput> | quizzesCreateWithoutTeachersInput[] | quizzesUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutTeachersInput | quizzesCreateOrConnectWithoutTeachersInput[]
    createMany?: quizzesCreateManyTeachersInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type quizzesUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<quizzesCreateWithoutTeachersInput, quizzesUncheckedCreateWithoutTeachersInput> | quizzesCreateWithoutTeachersInput[] | quizzesUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutTeachersInput | quizzesCreateOrConnectWithoutTeachersInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutTeachersInput | quizzesUpsertWithWhereUniqueWithoutTeachersInput[]
    createMany?: quizzesCreateManyTeachersInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutTeachersInput | quizzesUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutTeachersInput | quizzesUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type quizzesUncheckedUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<quizzesCreateWithoutTeachersInput, quizzesUncheckedCreateWithoutTeachersInput> | quizzesCreateWithoutTeachersInput[] | quizzesUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutTeachersInput | quizzesCreateOrConnectWithoutTeachersInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutTeachersInput | quizzesUpsertWithWhereUniqueWithoutTeachersInput[]
    createMany?: quizzesCreateManyTeachersInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutTeachersInput | quizzesUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutTeachersInput | quizzesUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type quizzesCreateNestedOneWithoutPublished_quizzesInput = {
    create?: XOR<quizzesCreateWithoutPublished_quizzesInput, quizzesUncheckedCreateWithoutPublished_quizzesInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutPublished_quizzesInput
    connect?: quizzesWhereUniqueInput
  }

  export type quizzesUpdateOneRequiredWithoutPublished_quizzesNestedInput = {
    create?: XOR<quizzesCreateWithoutPublished_quizzesInput, quizzesUncheckedCreateWithoutPublished_quizzesInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutPublished_quizzesInput
    upsert?: quizzesUpsertWithoutPublished_quizzesInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutPublished_quizzesInput, quizzesUpdateWithoutPublished_quizzesInput>, quizzesUncheckedUpdateWithoutPublished_quizzesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type questionsCreateWithoutAnswersInput = {
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    quizzes: quizzesCreateNestedOneWithoutQuestionsInput
    student_answers?: student_answersCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutAnswersInput = {
    id_question?: number
    id_quiz: number
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    student_answers?: student_answersUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutAnswersInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
  }

  export type questionsUpsertWithoutAnswersInput = {
    update: XOR<questionsUpdateWithoutAnswersInput, questionsUncheckedUpdateWithoutAnswersInput>
    create: XOR<questionsCreateWithoutAnswersInput, questionsUncheckedCreateWithoutAnswersInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutAnswersInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutAnswersInput, questionsUncheckedUpdateWithoutAnswersInput>
  }

  export type questionsUpdateWithoutAnswersInput = {
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    quizzes?: quizzesUpdateOneRequiredWithoutQuestionsNestedInput
    student_answers?: student_answersUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutAnswersInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    student_answers?: student_answersUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type studentsCreateWithoutAttemptsInput = {
    first_name: string
    last_name: string
    annee: number
    groupe_student: number
    email: string
    password: string
    created_at?: Date | string
  }

  export type studentsUncheckedCreateWithoutAttemptsInput = {
    id_student?: number
    first_name: string
    last_name: string
    annee: number
    groupe_student: number
    email: string
    password: string
    created_at?: Date | string
  }

  export type studentsCreateOrConnectWithoutAttemptsInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutAttemptsInput, studentsUncheckedCreateWithoutAttemptsInput>
  }

  export type quizzesCreateWithoutAttemptsInput = {
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    published_quizzes?: published_quizzesCreateNestedManyWithoutQuizzesInput
    questions?: questionsCreateNestedManyWithoutQuizzesInput
    teachers: teachersCreateNestedOneWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutAttemptsInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    id_teacher: number
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    published_quizzes?: published_quizzesUncheckedCreateNestedManyWithoutQuizzesInput
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutAttemptsInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutAttemptsInput, quizzesUncheckedCreateWithoutAttemptsInput>
  }

  export type student_answersCreateWithoutAttemptsInput = {
    student_answer_text?: string | null
    correct: number
    questions: questionsCreateNestedOneWithoutStudent_answersInput
  }

  export type student_answersUncheckedCreateWithoutAttemptsInput = {
    id_student_answer?: number
    id_question: number
    student_answer_text?: string | null
    correct: number
  }

  export type student_answersCreateOrConnectWithoutAttemptsInput = {
    where: student_answersWhereUniqueInput
    create: XOR<student_answersCreateWithoutAttemptsInput, student_answersUncheckedCreateWithoutAttemptsInput>
  }

  export type student_answersCreateManyAttemptsInputEnvelope = {
    data: student_answersCreateManyAttemptsInput | student_answersCreateManyAttemptsInput[]
    skipDuplicates?: boolean
  }

  export type studentsUpsertWithoutAttemptsInput = {
    update: XOR<studentsUpdateWithoutAttemptsInput, studentsUncheckedUpdateWithoutAttemptsInput>
    create: XOR<studentsCreateWithoutAttemptsInput, studentsUncheckedCreateWithoutAttemptsInput>
    where?: studentsWhereInput
  }

  export type studentsUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: studentsWhereInput
    data: XOR<studentsUpdateWithoutAttemptsInput, studentsUncheckedUpdateWithoutAttemptsInput>
  }

  export type studentsUpdateWithoutAttemptsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    annee?: IntFieldUpdateOperationsInput | number
    groupe_student?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentsUncheckedUpdateWithoutAttemptsInput = {
    id_student?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    annee?: IntFieldUpdateOperationsInput | number
    groupe_student?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizzesUpsertWithoutAttemptsInput = {
    update: XOR<quizzesUpdateWithoutAttemptsInput, quizzesUncheckedUpdateWithoutAttemptsInput>
    create: XOR<quizzesCreateWithoutAttemptsInput, quizzesUncheckedCreateWithoutAttemptsInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutAttemptsInput, quizzesUncheckedUpdateWithoutAttemptsInput>
  }

  export type quizzesUpdateWithoutAttemptsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    published_quizzes?: published_quizzesUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
    teachers?: teachersUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutAttemptsInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    id_teacher?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    published_quizzes?: published_quizzesUncheckedUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type student_answersUpsertWithWhereUniqueWithoutAttemptsInput = {
    where: student_answersWhereUniqueInput
    update: XOR<student_answersUpdateWithoutAttemptsInput, student_answersUncheckedUpdateWithoutAttemptsInput>
    create: XOR<student_answersCreateWithoutAttemptsInput, student_answersUncheckedCreateWithoutAttemptsInput>
  }

  export type student_answersUpdateWithWhereUniqueWithoutAttemptsInput = {
    where: student_answersWhereUniqueInput
    data: XOR<student_answersUpdateWithoutAttemptsInput, student_answersUncheckedUpdateWithoutAttemptsInput>
  }

  export type student_answersUpdateManyWithWhereWithoutAttemptsInput = {
    where: student_answersScalarWhereInput
    data: XOR<student_answersUpdateManyMutationInput, student_answersUncheckedUpdateManyWithoutAttemptsInput>
  }

  export type student_answersScalarWhereInput = {
    AND?: student_answersScalarWhereInput | student_answersScalarWhereInput[]
    OR?: student_answersScalarWhereInput[]
    NOT?: student_answersScalarWhereInput | student_answersScalarWhereInput[]
    id_student_answer?: IntFilter<"student_answers"> | number
    id_attempt?: IntFilter<"student_answers"> | number
    id_question?: IntFilter<"student_answers"> | number
    student_answer_text?: StringNullableFilter<"student_answers"> | string | null
    correct?: IntFilter<"student_answers"> | number
  }

  export type answersCreateWithoutQuestionsInput = {
    answer_text: string
    correct: number
  }

  export type answersUncheckedCreateWithoutQuestionsInput = {
    id_answer?: number
    answer_text: string
    correct: number
  }

  export type answersCreateOrConnectWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    create: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput>
  }

  export type answersCreateManyQuestionsInputEnvelope = {
    data: answersCreateManyQuestionsInput | answersCreateManyQuestionsInput[]
    skipDuplicates?: boolean
  }

  export type quizzesCreateWithoutQuestionsInput = {
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsCreateNestedManyWithoutQuizzesInput
    published_quizzes?: published_quizzesCreateNestedManyWithoutQuizzesInput
    teachers: teachersCreateNestedOneWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutQuestionsInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    id_teacher: number
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsUncheckedCreateNestedManyWithoutQuizzesInput
    published_quizzes?: published_quizzesUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutQuestionsInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
  }

  export type student_answersCreateWithoutQuestionsInput = {
    student_answer_text?: string | null
    correct: number
    attempts: attemptsCreateNestedOneWithoutStudent_answersInput
  }

  export type student_answersUncheckedCreateWithoutQuestionsInput = {
    id_student_answer?: number
    id_attempt: number
    student_answer_text?: string | null
    correct: number
  }

  export type student_answersCreateOrConnectWithoutQuestionsInput = {
    where: student_answersWhereUniqueInput
    create: XOR<student_answersCreateWithoutQuestionsInput, student_answersUncheckedCreateWithoutQuestionsInput>
  }

  export type student_answersCreateManyQuestionsInputEnvelope = {
    data: student_answersCreateManyQuestionsInput | student_answersCreateManyQuestionsInput[]
    skipDuplicates?: boolean
  }

  export type answersUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    update: XOR<answersUpdateWithoutQuestionsInput, answersUncheckedUpdateWithoutQuestionsInput>
    create: XOR<answersCreateWithoutQuestionsInput, answersUncheckedCreateWithoutQuestionsInput>
  }

  export type answersUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: answersWhereUniqueInput
    data: XOR<answersUpdateWithoutQuestionsInput, answersUncheckedUpdateWithoutQuestionsInput>
  }

  export type answersUpdateManyWithWhereWithoutQuestionsInput = {
    where: answersScalarWhereInput
    data: XOR<answersUpdateManyMutationInput, answersUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type answersScalarWhereInput = {
    AND?: answersScalarWhereInput | answersScalarWhereInput[]
    OR?: answersScalarWhereInput[]
    NOT?: answersScalarWhereInput | answersScalarWhereInput[]
    id_answer?: IntFilter<"answers"> | number
    id_question?: IntFilter<"answers"> | number
    answer_text?: StringFilter<"answers"> | string
    correct?: IntFilter<"answers"> | number
  }

  export type quizzesUpsertWithoutQuestionsInput = {
    update: XOR<quizzesUpdateWithoutQuestionsInput, quizzesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<quizzesCreateWithoutQuestionsInput, quizzesUncheckedCreateWithoutQuestionsInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutQuestionsInput, quizzesUncheckedUpdateWithoutQuestionsInput>
  }

  export type quizzesUpdateWithoutQuestionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUpdateManyWithoutQuizzesNestedInput
    published_quizzes?: published_quizzesUpdateManyWithoutQuizzesNestedInput
    teachers?: teachersUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutQuestionsInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    id_teacher?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUncheckedUpdateManyWithoutQuizzesNestedInput
    published_quizzes?: published_quizzesUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type student_answersUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: student_answersWhereUniqueInput
    update: XOR<student_answersUpdateWithoutQuestionsInput, student_answersUncheckedUpdateWithoutQuestionsInput>
    create: XOR<student_answersCreateWithoutQuestionsInput, student_answersUncheckedCreateWithoutQuestionsInput>
  }

  export type student_answersUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: student_answersWhereUniqueInput
    data: XOR<student_answersUpdateWithoutQuestionsInput, student_answersUncheckedUpdateWithoutQuestionsInput>
  }

  export type student_answersUpdateManyWithWhereWithoutQuestionsInput = {
    where: student_answersScalarWhereInput
    data: XOR<student_answersUpdateManyMutationInput, student_answersUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type attemptsCreateWithoutQuizzesInput = {
    corrected: number
    score?: number
    attempt_at?: Date | string
    students: studentsCreateNestedOneWithoutAttemptsInput
    student_answers?: student_answersCreateNestedManyWithoutAttemptsInput
  }

  export type attemptsUncheckedCreateWithoutQuizzesInput = {
    id_attempt?: number
    id_student: number
    corrected: number
    score?: number
    attempt_at?: Date | string
    student_answers?: student_answersUncheckedCreateNestedManyWithoutAttemptsInput
  }

  export type attemptsCreateOrConnectWithoutQuizzesInput = {
    where: attemptsWhereUniqueInput
    create: XOR<attemptsCreateWithoutQuizzesInput, attemptsUncheckedCreateWithoutQuizzesInput>
  }

  export type attemptsCreateManyQuizzesInputEnvelope = {
    data: attemptsCreateManyQuizzesInput | attemptsCreateManyQuizzesInput[]
    skipDuplicates?: boolean
  }

  export type published_quizzesCreateWithoutQuizzesInput = {
    student_number: number
    published_at?: Date | string
  }

  export type published_quizzesUncheckedCreateWithoutQuizzesInput = {
    id_published?: number
    student_number: number
    published_at?: Date | string
  }

  export type published_quizzesCreateOrConnectWithoutQuizzesInput = {
    where: published_quizzesWhereUniqueInput
    create: XOR<published_quizzesCreateWithoutQuizzesInput, published_quizzesUncheckedCreateWithoutQuizzesInput>
  }

  export type published_quizzesCreateManyQuizzesInputEnvelope = {
    data: published_quizzesCreateManyQuizzesInput | published_quizzesCreateManyQuizzesInput[]
    skipDuplicates?: boolean
  }

  export type questionsCreateWithoutQuizzesInput = {
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    answers?: answersCreateNestedManyWithoutQuestionsInput
    student_answers?: student_answersCreateNestedManyWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutQuizzesInput = {
    id_question?: number
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    answers?: answersUncheckedCreateNestedManyWithoutQuestionsInput
    student_answers?: student_answersUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutQuizzesInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput>
  }

  export type questionsCreateManyQuizzesInputEnvelope = {
    data: questionsCreateManyQuizzesInput | questionsCreateManyQuizzesInput[]
    skipDuplicates?: boolean
  }

  export type teachersCreateWithoutQuizzesInput = {
    last_name: string
    first_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type teachersUncheckedCreateWithoutQuizzesInput = {
    id_teacher?: number
    last_name: string
    first_name: string
    email: string
    password: string
    created_at?: Date | string
  }

  export type teachersCreateOrConnectWithoutQuizzesInput = {
    where: teachersWhereUniqueInput
    create: XOR<teachersCreateWithoutQuizzesInput, teachersUncheckedCreateWithoutQuizzesInput>
  }

  export type attemptsUpsertWithWhereUniqueWithoutQuizzesInput = {
    where: attemptsWhereUniqueInput
    update: XOR<attemptsUpdateWithoutQuizzesInput, attemptsUncheckedUpdateWithoutQuizzesInput>
    create: XOR<attemptsCreateWithoutQuizzesInput, attemptsUncheckedCreateWithoutQuizzesInput>
  }

  export type attemptsUpdateWithWhereUniqueWithoutQuizzesInput = {
    where: attemptsWhereUniqueInput
    data: XOR<attemptsUpdateWithoutQuizzesInput, attemptsUncheckedUpdateWithoutQuizzesInput>
  }

  export type attemptsUpdateManyWithWhereWithoutQuizzesInput = {
    where: attemptsScalarWhereInput
    data: XOR<attemptsUpdateManyMutationInput, attemptsUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type attemptsScalarWhereInput = {
    AND?: attemptsScalarWhereInput | attemptsScalarWhereInput[]
    OR?: attemptsScalarWhereInput[]
    NOT?: attemptsScalarWhereInput | attemptsScalarWhereInput[]
    id_attempt?: IntFilter<"attempts"> | number
    id_student?: IntFilter<"attempts"> | number
    id_quiz?: IntFilter<"attempts"> | number
    corrected?: IntFilter<"attempts"> | number
    score?: FloatFilter<"attempts"> | number
    attempt_at?: DateTimeFilter<"attempts"> | Date | string
  }

  export type published_quizzesUpsertWithWhereUniqueWithoutQuizzesInput = {
    where: published_quizzesWhereUniqueInput
    update: XOR<published_quizzesUpdateWithoutQuizzesInput, published_quizzesUncheckedUpdateWithoutQuizzesInput>
    create: XOR<published_quizzesCreateWithoutQuizzesInput, published_quizzesUncheckedCreateWithoutQuizzesInput>
  }

  export type published_quizzesUpdateWithWhereUniqueWithoutQuizzesInput = {
    where: published_quizzesWhereUniqueInput
    data: XOR<published_quizzesUpdateWithoutQuizzesInput, published_quizzesUncheckedUpdateWithoutQuizzesInput>
  }

  export type published_quizzesUpdateManyWithWhereWithoutQuizzesInput = {
    where: published_quizzesScalarWhereInput
    data: XOR<published_quizzesUpdateManyMutationInput, published_quizzesUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type published_quizzesScalarWhereInput = {
    AND?: published_quizzesScalarWhereInput | published_quizzesScalarWhereInput[]
    OR?: published_quizzesScalarWhereInput[]
    NOT?: published_quizzesScalarWhereInput | published_quizzesScalarWhereInput[]
    id_published?: IntFilter<"published_quizzes"> | number
    id_quiz?: IntFilter<"published_quizzes"> | number
    student_number?: IntFilter<"published_quizzes"> | number
    published_at?: DateTimeFilter<"published_quizzes"> | Date | string
  }

  export type questionsUpsertWithWhereUniqueWithoutQuizzesInput = {
    where: questionsWhereUniqueInput
    update: XOR<questionsUpdateWithoutQuizzesInput, questionsUncheckedUpdateWithoutQuizzesInput>
    create: XOR<questionsCreateWithoutQuizzesInput, questionsUncheckedCreateWithoutQuizzesInput>
  }

  export type questionsUpdateWithWhereUniqueWithoutQuizzesInput = {
    where: questionsWhereUniqueInput
    data: XOR<questionsUpdateWithoutQuizzesInput, questionsUncheckedUpdateWithoutQuizzesInput>
  }

  export type questionsUpdateManyWithWhereWithoutQuizzesInput = {
    where: questionsScalarWhereInput
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type questionsScalarWhereInput = {
    AND?: questionsScalarWhereInput | questionsScalarWhereInput[]
    OR?: questionsScalarWhereInput[]
    NOT?: questionsScalarWhereInput | questionsScalarWhereInput[]
    id_question?: IntFilter<"questions"> | number
    id_quiz?: IntFilter<"questions"> | number
    duration?: IntNullableFilter<"questions"> | number | null
    question_text?: StringFilter<"questions"> | string
    question_number?: IntFilter<"questions"> | number
    points?: FloatFilter<"questions"> | number
    question_type?: StringFilter<"questions"> | string
    created_at?: DateTimeFilter<"questions"> | Date | string
    question_percentage?: IntFilter<"questions"> | number
  }

  export type teachersUpsertWithoutQuizzesInput = {
    update: XOR<teachersUpdateWithoutQuizzesInput, teachersUncheckedUpdateWithoutQuizzesInput>
    create: XOR<teachersCreateWithoutQuizzesInput, teachersUncheckedCreateWithoutQuizzesInput>
    where?: teachersWhereInput
  }

  export type teachersUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: teachersWhereInput
    data: XOR<teachersUpdateWithoutQuizzesInput, teachersUncheckedUpdateWithoutQuizzesInput>
  }

  export type teachersUpdateWithoutQuizzesInput = {
    last_name?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type teachersUncheckedUpdateWithoutQuizzesInput = {
    id_teacher?: IntFieldUpdateOperationsInput | number
    last_name?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attemptsCreateWithoutStudent_answersInput = {
    corrected: number
    score?: number
    attempt_at?: Date | string
    students: studentsCreateNestedOneWithoutAttemptsInput
    quizzes: quizzesCreateNestedOneWithoutAttemptsInput
  }

  export type attemptsUncheckedCreateWithoutStudent_answersInput = {
    id_attempt?: number
    id_student: number
    id_quiz: number
    corrected: number
    score?: number
    attempt_at?: Date | string
  }

  export type attemptsCreateOrConnectWithoutStudent_answersInput = {
    where: attemptsWhereUniqueInput
    create: XOR<attemptsCreateWithoutStudent_answersInput, attemptsUncheckedCreateWithoutStudent_answersInput>
  }

  export type questionsCreateWithoutStudent_answersInput = {
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    answers?: answersCreateNestedManyWithoutQuestionsInput
    quizzes: quizzesCreateNestedOneWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutStudent_answersInput = {
    id_question?: number
    id_quiz: number
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
    answers?: answersUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type questionsCreateOrConnectWithoutStudent_answersInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutStudent_answersInput, questionsUncheckedCreateWithoutStudent_answersInput>
  }

  export type attemptsUpsertWithoutStudent_answersInput = {
    update: XOR<attemptsUpdateWithoutStudent_answersInput, attemptsUncheckedUpdateWithoutStudent_answersInput>
    create: XOR<attemptsCreateWithoutStudent_answersInput, attemptsUncheckedCreateWithoutStudent_answersInput>
    where?: attemptsWhereInput
  }

  export type attemptsUpdateToOneWithWhereWithoutStudent_answersInput = {
    where?: attemptsWhereInput
    data: XOR<attemptsUpdateWithoutStudent_answersInput, attemptsUncheckedUpdateWithoutStudent_answersInput>
  }

  export type attemptsUpdateWithoutStudent_answersInput = {
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: studentsUpdateOneRequiredWithoutAttemptsNestedInput
    quizzes?: quizzesUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type attemptsUncheckedUpdateWithoutStudent_answersInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_student?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsUpsertWithoutStudent_answersInput = {
    update: XOR<questionsUpdateWithoutStudent_answersInput, questionsUncheckedUpdateWithoutStudent_answersInput>
    create: XOR<questionsCreateWithoutStudent_answersInput, questionsUncheckedCreateWithoutStudent_answersInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutStudent_answersInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutStudent_answersInput, questionsUncheckedUpdateWithoutStudent_answersInput>
  }

  export type questionsUpdateWithoutStudent_answersInput = {
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    answers?: answersUpdateManyWithoutQuestionsNestedInput
    quizzes?: quizzesUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutStudent_answersInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    answers?: answersUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type attemptsCreateWithoutStudentsInput = {
    corrected: number
    score?: number
    attempt_at?: Date | string
    quizzes: quizzesCreateNestedOneWithoutAttemptsInput
    student_answers?: student_answersCreateNestedManyWithoutAttemptsInput
  }

  export type attemptsUncheckedCreateWithoutStudentsInput = {
    id_attempt?: number
    id_quiz: number
    corrected: number
    score?: number
    attempt_at?: Date | string
    student_answers?: student_answersUncheckedCreateNestedManyWithoutAttemptsInput
  }

  export type attemptsCreateOrConnectWithoutStudentsInput = {
    where: attemptsWhereUniqueInput
    create: XOR<attemptsCreateWithoutStudentsInput, attemptsUncheckedCreateWithoutStudentsInput>
  }

  export type attemptsCreateManyStudentsInputEnvelope = {
    data: attemptsCreateManyStudentsInput | attemptsCreateManyStudentsInput[]
    skipDuplicates?: boolean
  }

  export type attemptsUpsertWithWhereUniqueWithoutStudentsInput = {
    where: attemptsWhereUniqueInput
    update: XOR<attemptsUpdateWithoutStudentsInput, attemptsUncheckedUpdateWithoutStudentsInput>
    create: XOR<attemptsCreateWithoutStudentsInput, attemptsUncheckedCreateWithoutStudentsInput>
  }

  export type attemptsUpdateWithWhereUniqueWithoutStudentsInput = {
    where: attemptsWhereUniqueInput
    data: XOR<attemptsUpdateWithoutStudentsInput, attemptsUncheckedUpdateWithoutStudentsInput>
  }

  export type attemptsUpdateManyWithWhereWithoutStudentsInput = {
    where: attemptsScalarWhereInput
    data: XOR<attemptsUpdateManyMutationInput, attemptsUncheckedUpdateManyWithoutStudentsInput>
  }

  export type quizzesCreateWithoutTeachersInput = {
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsCreateNestedManyWithoutQuizzesInput
    published_quizzes?: published_quizzesCreateNestedManyWithoutQuizzesInput
    questions?: questionsCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutTeachersInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsUncheckedCreateNestedManyWithoutQuizzesInput
    published_quizzes?: published_quizzesUncheckedCreateNestedManyWithoutQuizzesInput
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutTeachersInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutTeachersInput, quizzesUncheckedCreateWithoutTeachersInput>
  }

  export type quizzesCreateManyTeachersInputEnvelope = {
    data: quizzesCreateManyTeachersInput | quizzesCreateManyTeachersInput[]
    skipDuplicates?: boolean
  }

  export type quizzesUpsertWithWhereUniqueWithoutTeachersInput = {
    where: quizzesWhereUniqueInput
    update: XOR<quizzesUpdateWithoutTeachersInput, quizzesUncheckedUpdateWithoutTeachersInput>
    create: XOR<quizzesCreateWithoutTeachersInput, quizzesUncheckedCreateWithoutTeachersInput>
  }

  export type quizzesUpdateWithWhereUniqueWithoutTeachersInput = {
    where: quizzesWhereUniqueInput
    data: XOR<quizzesUpdateWithoutTeachersInput, quizzesUncheckedUpdateWithoutTeachersInput>
  }

  export type quizzesUpdateManyWithWhereWithoutTeachersInput = {
    where: quizzesScalarWhereInput
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyWithoutTeachersInput>
  }

  export type quizzesScalarWhereInput = {
    AND?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
    OR?: quizzesScalarWhereInput[]
    NOT?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
    id_quiz?: IntFilter<"quizzes"> | number
    title?: StringFilter<"quizzes"> | string
    description?: StringNullableFilter<"quizzes"> | string | null
    duration?: IntNullableFilter<"quizzes"> | number | null
    correctionType?: StringFilter<"quizzes"> | string
    id_teacher?: IntFilter<"quizzes"> | number
    subject?: StringFilter<"quizzes"> | string
    status?: StringFilter<"quizzes"> | string
    score?: FloatFilter<"quizzes"> | number
    for_year?: IntNullableFilter<"quizzes"> | number | null
    for_groupe?: IntNullableFilter<"quizzes"> | number | null
    created_at?: DateTimeFilter<"quizzes"> | Date | string
    nb_attempts?: IntFilter<"quizzes"> | number
  }

  export type quizzesCreateWithoutPublished_quizzesInput = {
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsCreateNestedManyWithoutQuizzesInput
    questions?: questionsCreateNestedManyWithoutQuizzesInput
    teachers: teachersCreateNestedOneWithoutQuizzesInput
  }

  export type quizzesUncheckedCreateWithoutPublished_quizzesInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    id_teacher: number
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
    attempts?: attemptsUncheckedCreateNestedManyWithoutQuizzesInput
    questions?: questionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type quizzesCreateOrConnectWithoutPublished_quizzesInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutPublished_quizzesInput, quizzesUncheckedCreateWithoutPublished_quizzesInput>
  }

  export type quizzesUpsertWithoutPublished_quizzesInput = {
    update: XOR<quizzesUpdateWithoutPublished_quizzesInput, quizzesUncheckedUpdateWithoutPublished_quizzesInput>
    create: XOR<quizzesCreateWithoutPublished_quizzesInput, quizzesUncheckedCreateWithoutPublished_quizzesInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutPublished_quizzesInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutPublished_quizzesInput, quizzesUncheckedUpdateWithoutPublished_quizzesInput>
  }

  export type quizzesUpdateWithoutPublished_quizzesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
    teachers?: teachersUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutPublished_quizzesInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    id_teacher?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUncheckedUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type student_answersCreateManyAttemptsInput = {
    id_student_answer?: number
    id_question: number
    student_answer_text?: string | null
    correct: number
  }

  export type student_answersUpdateWithoutAttemptsInput = {
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
    questions?: questionsUpdateOneRequiredWithoutStudent_answersNestedInput
  }

  export type student_answersUncheckedUpdateWithoutAttemptsInput = {
    id_student_answer?: IntFieldUpdateOperationsInput | number
    id_question?: IntFieldUpdateOperationsInput | number
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type student_answersUncheckedUpdateManyWithoutAttemptsInput = {
    id_student_answer?: IntFieldUpdateOperationsInput | number
    id_question?: IntFieldUpdateOperationsInput | number
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type answersCreateManyQuestionsInput = {
    id_answer?: number
    answer_text: string
    correct: number
  }

  export type student_answersCreateManyQuestionsInput = {
    id_student_answer?: number
    id_attempt: number
    student_answer_text?: string | null
    correct: number
  }

  export type answersUpdateWithoutQuestionsInput = {
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type answersUncheckedUpdateWithoutQuestionsInput = {
    id_answer?: IntFieldUpdateOperationsInput | number
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type answersUncheckedUpdateManyWithoutQuestionsInput = {
    id_answer?: IntFieldUpdateOperationsInput | number
    answer_text?: StringFieldUpdateOperationsInput | string
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type student_answersUpdateWithoutQuestionsInput = {
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUpdateOneRequiredWithoutStudent_answersNestedInput
  }

  export type student_answersUncheckedUpdateWithoutQuestionsInput = {
    id_student_answer?: IntFieldUpdateOperationsInput | number
    id_attempt?: IntFieldUpdateOperationsInput | number
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type student_answersUncheckedUpdateManyWithoutQuestionsInput = {
    id_student_answer?: IntFieldUpdateOperationsInput | number
    id_attempt?: IntFieldUpdateOperationsInput | number
    student_answer_text?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: IntFieldUpdateOperationsInput | number
  }

  export type attemptsCreateManyQuizzesInput = {
    id_attempt?: number
    id_student: number
    corrected: number
    score?: number
    attempt_at?: Date | string
  }

  export type published_quizzesCreateManyQuizzesInput = {
    id_published?: number
    student_number: number
    published_at?: Date | string
  }

  export type questionsCreateManyQuizzesInput = {
    id_question?: number
    duration?: number | null
    question_text: string
    question_number: number
    points: number
    question_type: string
    created_at?: Date | string
    question_percentage?: number
  }

  export type attemptsUpdateWithoutQuizzesInput = {
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: studentsUpdateOneRequiredWithoutAttemptsNestedInput
    student_answers?: student_answersUpdateManyWithoutAttemptsNestedInput
  }

  export type attemptsUncheckedUpdateWithoutQuizzesInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_student?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    student_answers?: student_answersUncheckedUpdateManyWithoutAttemptsNestedInput
  }

  export type attemptsUncheckedUpdateManyWithoutQuizzesInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_student?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type published_quizzesUpdateWithoutQuizzesInput = {
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type published_quizzesUncheckedUpdateWithoutQuizzesInput = {
    id_published?: IntFieldUpdateOperationsInput | number
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type published_quizzesUncheckedUpdateManyWithoutQuizzesInput = {
    id_published?: IntFieldUpdateOperationsInput | number
    student_number?: IntFieldUpdateOperationsInput | number
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsUpdateWithoutQuizzesInput = {
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    answers?: answersUpdateManyWithoutQuestionsNestedInput
    student_answers?: student_answersUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuizzesInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
    answers?: answersUncheckedUpdateManyWithoutQuestionsNestedInput
    student_answers?: student_answersUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateManyWithoutQuizzesInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    question_text?: StringFieldUpdateOperationsInput | string
    question_number?: IntFieldUpdateOperationsInput | number
    points?: FloatFieldUpdateOperationsInput | number
    question_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question_percentage?: IntFieldUpdateOperationsInput | number
  }

  export type attemptsCreateManyStudentsInput = {
    id_attempt?: number
    id_quiz: number
    corrected: number
    score?: number
    attempt_at?: Date | string
  }

  export type attemptsUpdateWithoutStudentsInput = {
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: quizzesUpdateOneRequiredWithoutAttemptsNestedInput
    student_answers?: student_answersUpdateManyWithoutAttemptsNestedInput
  }

  export type attemptsUncheckedUpdateWithoutStudentsInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
    student_answers?: student_answersUncheckedUpdateManyWithoutAttemptsNestedInput
  }

  export type attemptsUncheckedUpdateManyWithoutStudentsInput = {
    id_attempt?: IntFieldUpdateOperationsInput | number
    id_quiz?: IntFieldUpdateOperationsInput | number
    corrected?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    attempt_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type quizzesCreateManyTeachersInput = {
    id_quiz?: number
    title: string
    description?: string | null
    duration?: number | null
    correctionType: string
    subject: string
    status?: string
    score: number
    for_year?: number | null
    for_groupe?: number | null
    created_at?: Date | string
    nb_attempts?: number
  }

  export type quizzesUpdateWithoutTeachersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUpdateManyWithoutQuizzesNestedInput
    published_quizzes?: published_quizzesUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateWithoutTeachersInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
    attempts?: attemptsUncheckedUpdateManyWithoutQuizzesNestedInput
    published_quizzes?: published_quizzesUncheckedUpdateManyWithoutQuizzesNestedInput
    questions?: questionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type quizzesUncheckedUpdateManyWithoutTeachersInput = {
    id_quiz?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    correctionType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    for_year?: NullableIntFieldUpdateOperationsInput | number | null
    for_groupe?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_attempts?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}